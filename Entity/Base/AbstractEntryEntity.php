<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace MU\EternizerModule\Entity\Base;

use MU\EternizerModule\EternizerEvents;
use MU\EternizerModule\Event\FilterEntryEvent;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;
use Symfony\Component\Validator\Constraints as Assert;

use DataUtil;
use FormUtil;
use ModUtil;
use ServiceUtil;
use System;
use UserUtil;
use Zikula_EntityAccess;
use Zikula_Exception;
use Zikula_Workflow_Util;
use ZLanguage;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for entry entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractEntryEntity extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to.
     */
    protected $_objectType = 'entry';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed.
     */
    protected $_bypassValidation = false;
    
    /**
     * @Assert\Type(type="array")
     * @var array List of available item actions.
     */
    protected $_actions = array();
    
    /**
     * @var array The current workflow data of this object.
     */
    protected $__WORKFLOW__ = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=1000000000, message="Length of field value must not be higher than 9.")) {
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState.
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=15, nullable=true)
     * @Assert\Length(min="0", max="15")
     * @var string $ip.
     */
    protected $ip = '';
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="100")
     * @var string $name.
     */
    protected $name = '';
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="100")
     * @var string $email.
     */
    protected $email = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @Assert\Url()
     * @var string $homepage.
     */
    protected $homepage = '';
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="100")
     * @var string $location.
     */
    protected $location = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="2000")
     * @var text $text.
     */
    protected $text = '';
    
    /**
     * @ORM\Column(type="text", length=2000, nullable=true)
     * @Assert\Length(min="0", max="2000")
     * @var text $notes.
     */
    protected $notes = '';
    
    /**
     * @ORM\Column(length=1)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="1")
     * @var string $obj_status.
     */
    protected $obj_status = 'A';
    
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @Assert\Type(type="integer")
     * @var integer $createdUserId.
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @Assert\Type(type="integer")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @Assert\DateTime()
     * @var datetime $createdDate.
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @Assert\DateTime()
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->workflowState = 'initial';
        $this->initWorkflow();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Set _bypass validation.
     *
     * @param boolean $_bypassValidation.
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    /**
     * Get __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Set __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__.
     *
     * @return void
     */
    public function set__WORKFLOW__(array $__WORKFLOW__ = Array())
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    
    /**
     * Get workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Set workflow state.
     *
     * @param string $workflowState.
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = $workflowState;
    }
    
    /**
     * Get ip.
     *
     * @return string
     */
    public function getIp()
    {
        return $this->ip;
    }
    
    /**
     * Set ip.
     *
     * @param string $ip.
     *
     * @return void
     */
    public function setIp($ip)
    {
        $this->ip = $ip;
    }
    
    /**
     * Get name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Set name.
     *
     * @param string $name.
     *
     * @return void
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    
    /**
     * Get email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
    
    /**
     * Set email.
     *
     * @param string $email.
     *
     * @return void
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }
    
    /**
     * Get homepage.
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->homepage;
    }
    
    /**
     * Set homepage.
     *
     * @param string $homepage.
     *
     * @return void
     */
    public function setHomepage($homepage)
    {
        $this->homepage = $homepage;
    }
    
    /**
     * Get location.
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->location;
    }
    
    /**
     * Set location.
     *
     * @param string $location.
     *
     * @return void
     */
    public function setLocation($location)
    {
        $this->location = $location;
    }
    
    /**
     * Get text.
     *
     * @return text
     */
    public function getText()
    {
        return $this->text;
    }
    
    /**
     * Set text.
     *
     * @param text $text.
     *
     * @return void
     */
    public function setText($text)
    {
        $this->text = $text;
    }
    
    /**
     * Get notes.
     *
     * @return text
     */
    public function getNotes()
    {
        return $this->notes;
    }
    
    /**
     * Set notes.
     *
     * @param text $notes.
     *
     * @return void
     */
    public function setNotes($notes)
    {
        $this->notes = $notes;
    }
    
    /**
     * Get obj_status.
     *
     * @return string
     */
    public function getObj_status()
    {
        return $this->obj_status;
    }
    
    /**
     * Set obj_status.
     *
     * @param string $obj_status.
     *
     * @return void
     */
    public function setObj_status($obj_status)
    {
        $this->obj_status = $obj_status;
    }
    
    /**
     * Get created user id.
     *
     * @return integer
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    
    protected $processedLoadCallback = false;
    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MU\EternizerModule\Entity\EntryEntity::postLoadCallback()
     * @return boolean true if completed successfully else false.
     *
     * @throws RuntimeException Thrown if upload file base path retrieval fails
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        if ($this->processedLoadCallback) {
            return true;
        }
    
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $serviceManager = ServiceUtil::getManager();
        $requestStack = $serviceManager->get('request_stack');
        $usesCsvOutput = $requestStack->getCurrentRequest()->getRequestFormat() == 'csv' ? true : false;
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this->formatTextualField('workflowState', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('ip', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('name', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('email', $currentFunc, $usesCsvOutput);
        $this['homepage'] = ((isset($this['homepage']) && !empty($this['homepage'])) ? DataUtil::formatForDisplay($this['homepage']) : '');
        $this->formatTextualField('location', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('text', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('notes', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('obj_status', $currentFunc, $usesCsvOutput);
    
        $this->prepareItemActions();
    
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_POST_LOAD, $event);
    
        $this->processedLoadCallback = true;
    
        return true;
    }
    
    /**
     * Formats a given textual field depending on it's actual kind of content.
     *
     * @param string  $fieldName     Name of field to be formatted.
     * @param string  $currentFunc   Name of current controller action.
     * @param string  $usesCsvOutput Whether the output is CSV or not (defaults to false).
     * @param boolean $allowZero     Whether 0 values are allowed or not (defaults to false).
     */
    protected function formatTextualField($fieldName, $currentFunc, $usesCsvOutput = false, $allowZero = false)
    {
        if ($currentFunc == 'edit') {
            // apply no changes when editing the content
            return;
        }
    
        if ($usesCsvOutput == 1) {
            // apply no changes for CSV output
            return;
        }
    
        $string = '';
        if (isset($this[$fieldName])) {
            if (!empty($this[$fieldName]) || ($allowZero && $this[$fieldName] == 0)) {
                $string = $this[$fieldName];
                if ($this->containsHtml($string)) {
                    $string = DataUtil::formatForDisplayHTML($string);
                } else {
                    $string = DataUtil::formatForDisplay($string);
                    $string = nl2br($string);
                }
            }
        }
    
        // workaround for ampersand problem (#692)
        $string = str_replace('&amp;', '&', $string);
    
        $this[$fieldName] = $string;
    }
    
    /**
     * Checks whether any html tags are contained in the given string.
     * See http://stackoverflow.com/questions/10778035/how-to-check-if-string-contents-have-any-html-in-it for implementation details.
     *
     * @param $string string The given input string.
     *
     * @return boolean Whether any html tags are found or not.
     */
    protected function containsHtml($string)
    {
        return preg_match("/<[^<]+>/", $string, $m) != 0;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MU\EternizerModule\Entity\EntryEntity::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_PRE_PERSIST, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MU\EternizerModule\Entity\EntryEntity::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $objectId = $this->createCompositeIdentifier();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} created the {entity} with id {id}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $objectId));
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_POST_PERSIST, $event);
    
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MU\EternizerModule\Entity\EntryEntity::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     *
     * @throws RuntimeException Thrown if workflow deletion fails
     */
    protected function performPreRemoveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_PRE_REMOVE, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        // delete workflow for this entity
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('mueternizermodule.workflow_helper');
        $workflowHelper->normaliseWorkflowData($this);
        $workflow = $this['__WORKFLOW__'];
        if ($workflow['id'] > 0) {
            $serviceManager = ServiceUtil::getManager();
            $entityManager = $serviceManager->get('doctrine.entitymanager');
            $result = true;
            try {
                $workflow = $entityManager->find('Zikula\Core\Doctrine\Entity\WorkflowEntity', $workflow['id']);
                $entityManager->remove($workflow);
                $entityManager->flush();
            } catch (\Exception $e) {
                $result = false;
            }
            if ($result === false) {
                $dom = ZLanguage::getModuleDomain('MUEternizerModule');
                $session = $serviceManager->get('session');
                $session->getFlashBag()->add('error', __('Error! Could not remove stored workflow. Deletion has been aborted.', $dom));
                return false;
            }
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MU\EternizerModule\Entity\EntryEntity::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
    
        $objectId = $this->createCompositeIdentifier();
    
    
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} removed the {entity} with id {id}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $objectId));
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_POST_REMOVE, $event);
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MU\EternizerModule\Entity\EntryEntity::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_PRE_UPDATE, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MU\EternizerModule\Entity\EntryEntity::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $objectId = $this->createCompositeIdentifier();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} updated the {entity} with id {id}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $objectId));
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_POST_UPDATE, $event);
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MU\EternizerModule\Entity\EntryEntity::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_PRE_SAVE, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MU\EternizerModule\Entity\EntryEntity::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $objectId = $this->createCompositeIdentifier();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} saved the {entity} with id {id}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $objectId));
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterEntryEvent and dispatch it
        $event = new FilterEntryEvent($this);
        $dispatcher->dispatch(EternizerEvents::ENTRY_POST_SAVE, $event);
    
        return true;
    }
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     */
    public function getTitleFromDisplayPattern()
    {
        $serviceManager = ServiceUtil::getManager();
        $listHelper = $serviceManager->get('mueternizermodule.listentries_helper');
    
        $formattedTitle = ''
                . $this->getIp();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     */
    public static function getWorkflowStateAllowedValues()
    {
        $serviceManager = ServiceUtil::getManager();
        $helper = $serviceManager->get('mueternizermodule.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForEntry();
    
        $allowedValues = array();
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record.
     *
     * @throws RuntimeException Thrown if retrieving the workflow object fails
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('mueternizermodule.workflow_helper');
        
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'MUEternizerModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName);
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, array('index', 'view', 'display')) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'MUEternizerModule');
            if (!$result) {
                $dom = ZLanguage::getModuleDomain('MUEternizerModule');
                $serviceManager = ServiceUtil::getManager();
                $session = $serviceManager->get('session');
                $session->getFlashBag()->add('error', __('Error! Could not load the associated workflow.', $dom));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('initial');
    
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('mueternizermodule.workflow_helper');
    
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'MUEternizerModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName);
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     */
    public function validate()
    {
        if ($this->_bypassValidation === true) {
            return true;
        }
    
        // decode possibly encoded mail addresses (#201)
        if (strpos($this['email'], '&#') !== false) {
            $this['email'] = html_entity_decode($this['email']);
        }
        $serviceManager = ServiceUtil::getManager();
    
        $validator = $serviceManager->get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $session = $serviceManager->get('session');
            foreach ($errors as $error) {
                $session->getFlashBag()->add('error', $error->getMessage());
            }
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentLegacyControllerType = FormUtil::getPassedValue('lct', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $component = 'MUEternizerModule:Entry:';
        $instance = $this->id . '::';
        $dom = ZLanguage::getModuleDomain('MUEternizerModule');
        $serviceManager = ServiceUtil::getManager();
        $permissionHelper = $serviceManager->get('zikula_permissions_module.api.permission');
        if ($currentLegacyControllerType == 'admin') {
            if (in_array($currentFunc, array('index', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'entry', 'func' => 'display', 'arguments' => array('id' => $this['id'])),
                    'icon' => 'search-plus',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                    'url' => array('type' => 'entry', 'func' => 'admindisplay', 'arguments' => array('id' => $this['id'])),
                    'icon' => 'eye',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('index', 'view', 'display'))) {
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'entry', 'func' => 'adminedit', 'arguments' => array('id' => $this['id'])),
                        'icon' => 'pencil-square-o',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'entry', 'func' => 'adminedit', 'arguments' => array('astemplate' => $this['id'])),
                        'icon' => 'files-o',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'entry', 'func' => 'admindelete', 'arguments' => array('id' => $this['id'])),
                        'icon' => 'trash-o',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'entry', 'func' => 'adminview', 'arguments' => array()),
                    'icon' => 'reply',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
        if ($currentLegacyControllerType == 'user') {
            if (in_array($currentFunc, array('index', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'entry', 'func' => 'display', 'arguments' => array('id' => $this['id'])),
                    'icon' => 'eye',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('index', 'view', 'display'))) {
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'entry', 'func' => 'edit', 'arguments' => array('id' => $this['id'])),
                        'icon' => 'pencil-square-o',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'entry', 'func' => 'edit', 'arguments' => array('astemplate' => $this['id'])),
                        'icon' => 'files-o',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'entry', 'func' => 'delete', 'arguments' => array('id' => $this['id'])),
                        'icon' => 'trash-o',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'entry', 'func' => 'view', 'arguments' => array()),
                    'icon' => 'reply',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return Array The resulting arguments list.
     */
    public function createUrlArgs()
    {
        $args = array();
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers.
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'mueternizermodule.ui_hooks.entries';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: array()
     * 
     * @return array of entity objects.
     */
    public function getRelatedObjectsToPersist(&$objects = array()) 
    {
        return array();
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString()
    {
        return $this->getId();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     * (4) http://www.pantovic.com/article/26/doctrine2-entity-cloning
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // reset Workflow
            $this->resetWorkflow();
    
            $this->setCreatedDate(null);
            $this->setCreatedUserId(null);
            $this->setUpdatedDate(null);
            $this->setUpdatedUserId(null);
    
            
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
