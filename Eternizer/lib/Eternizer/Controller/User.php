<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Eternizer
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sat Dec 31 13:59:03 CET 2011.
 */


/**
 * This is the User controller class providing navigation and interaction functionality.
 */
use Doctrine\ORM\Query\AST\Functions\ModFunction;
class Eternizer_Controller_User extends Eternizer_Controller_Base_User
{
    /**
     * This method is the default function, and is called whenever the application's
     * User area is called without defining arguments.
     *
     * @return mixed Output.
     */
    public function main($args)
    {
		// DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Eternizer::', '::', ACCESS_OVERVIEW));
		// DEBUG: permission check aspect ends	
		
        // redirect to view template
		return System::redirect(ModUtil::url($this->name, 'user', 'view'));
    }
	
	    /**
     * This method provides the handling of
     * the formposition
     * the editing of entries and
     * the order of entries
     *
     * @param string  $formposition		position of the create form
     * @param int  $userid              the userid of loggedin users
     * @param string  $args['sortdir']  Sorting direction
     * 
     * return the parent function
     * 
     */
    public function view($args)
    {
    	// We rule the position of the form
    	$formposition = ModUtil::getVar($this->name, 'formposition');
    	
    	//We check the userid for ruling the edit button
    	$userid = UserUtil::getVar('uid');
    	
    	//We check for editing of entries
    	$editentries = ModUtil::getVar($this->name, 'editentries');

    	// We assign to the template
    	$this->view->assign('formposition', $formposition);
    	$this->view->assign('userid', $userid);
    	$this->view->assign('editentries', $editentries);
    	
    	$order = ModUtil::getVar($this->name, 'order');
    	if ($order == 'descending') {
    		$args['sortdir'] = 'desc';
    	}
    	else {
    		$args['sortdir'] = 'asc';
    	}
    	
    	return parent::view($args);
    }
    
    /**
     * This method provides a generic handling of all edit requests.
     *
     * @param string  $ot           Treated object type.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     * @return mixed Output.
     */
    public function edit($args)
    {
    	//We check for parameters
    	$func = $this->request->getGet()->filter('func','view' , FILTER_SANITIZE_STRING);
    	$id = $this->request->getGet()->filter('id', null , FILTER_SANITIZE_NUMBER_INT);
   		
    	//We check for editing of entries
    	$editentries = ModUtil::getVar($this->name, 'editentries');
    	
    	// if editing is allowed we call the parent method
    	if ($editentries == 1) {
    		return parent::edit($args);
    	}
    	else {
    		if (($func == 'edit' || $func == 'view')) {
    			if ($id == null) {
    				return parent::edit($args);
    			}
    			// otherwise we make a redirect
    			else {
    				$url = ModUtil::url($this->name, 'user', 'view');
    				LogUtil::registerError($this->__('Sorry. The editing of entries is disabled.'));
    				System::redirect($url);
    	
    			}
    		}
    	}
    }
    
     /**
     * This method overrites the parent diplay function.
     *
     * @return mixed System Redirect.
     */
    public function display($args)
    {
    	// DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Eternizer::', '::', ACCESS_OVERVIEW));
		// DEBUG: permission check aspect ends

        // return main template
        return System::redirect(ModUtil::url($this->name, 'user', 'view'));
    }
    
}
