<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Eternizer
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Wed Jan 04 16:43:44 CET 2012.
 */

/**
 * Installer implementation class
 */
use Doctrine\DBAL\Connection;

class Eternizer_Installer extends Eternizer_Base_Installer
{

    /**
     * Install the Eternizer application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        // create all tables from according entity definitions
        try {
            DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %s module.', array($this->getName())));
        }

        // set up all our vars with initial values
        Eternizer_Util_Controller::setModVars();

        // create the default data for Eternizer
        $this->createDefaultData();

        // register persistent event handlers
        $this->registerPersistentEventHandlers();

        // register hook subscriber bundles
        HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());


        // initialisation successful
        return true;
    }

    /**
     * Upgrade the Eternizer application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldversion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldversion)
    {
        // Upgrade dependent on old version number
        switch ($oldversion) {
            case '1.0a':
            case '1.0':
            case '1.1':
                $profile = ModUtil::getVar('Eternizer', 'profile');

                if (DataUtil::is_serialized($profile)) {
                    $profile = unserialize($profile);
                }

                $profile = ModUtil::setVar('Eternizer', 'profile', $profile);
            case '1.1.1':

                // remove all module vars
                $this->delVars();

                // create all tables from according entity definitions
                try {
                    DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
                } catch (Exception $e) {
                    if (System::isDevelopmentMode()) {
                        LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                    }
                    return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %s module.', array($this->getName())));
                }

                // set up all our vars with initial values
                Eternizer_Util_Controller::setModVars();

                // create the default data for Eternizer
                $this->createDefaultData();

                // register persistent event handlers
                $this->registerPersistentEventHandlers();

                // register hook subscriber bundles
                HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());


                break;
        }

        return true;
    }
}
