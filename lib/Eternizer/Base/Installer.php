<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Eternizer
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Wed Jan 04 16:43:44 CET 2012.
 */

/**
 * Installer base class
 */
class Eternizer_Base_Installer extends Zikula_AbstractInstaller
{
    /**
     * Install the Eternizer application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        // create all tables from according entity definitions
        try {
            DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %s module.', array($this->getName())));
        }

        // set up all our vars with initial values
        $this->setVar('pagesize', 10);
        $this->setVar('mail', '');
        $this->setVar('order', 'descending');
        $this->setVar('moderate', 'guests');
        $this->setVar('formposition', 'below');
        $this->setVar('ipsave', false);
        $this->setVar('editentries', false);
        $this->setVar('period', 12);

        // create the default data for Eternizer
        $this->createDefaultData();

        // register persistent event handlers
        $this->registerPersistentEventHandlers();

        // register hook subscriber bundles
        HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());


        // initialisation successful
        return true;
    }

    /**
     * Upgrade the Eternizer application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldversion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldversion)
    {
        /*
            // Upgrade dependent on old version number
            switch ($oldversion) {
                case 1.0.0:
                    // do something
                    // ...
                    // update the database schema
                    try {
                        DoctrineHelper::updateSchema($this->entityManager, $this->listEntityClasses());
                    } catch (Exception $e) {
                        if (System::isDevelopmentMode()) {
                            LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                        }
                        return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s module.', array($this->getName())));
                    }
            }
        */

        // update successful
        return true;
    }

    /**
     * Uninstall Eternizer.
     *
     * @return boolean True on success, false otherwise.
     */
    public function uninstall()
    {
        // delete stored object workflows
        $result = Zikula_Workflow_Util::deleteWorkflowsForModule($this->getName());
        if ($result === false) {
            return LogUtil::registerError($this->__f('An error was encountered while removing stored object workflows for the %s module.', array($this->getName())));
        }

        try {
            DoctrineHelper::dropSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s module.', array($this->getName())));
        }

        // unregister persistent event handlers
        EventUtil::unregisterPersistentModuleHandlers('Eternizer');

        // unregister hook subscriber bundles
        HookUtil::unregisterSubscriberBundles($this->version->getHookSubscriberBundles());


        // remove all module vars
        $this->delVars();

        // deletion successful
        return true;
    }

    /**
     * Build array with all entity classes for Eternizer.
     *
     * @return array list of class names.
     */
    protected function listEntityClasses()
    {
        $classNames = array();
        $classNames[] = 'Eternizer_Entity_Entry';

        return $classNames;
    }

    /**
     * Create the default data for Eternizer.
     *
     * @return void
     */
    protected function createDefaultData()
    {
        // Ensure that tables are cleared
        $this->entityManager->transactional(function($entityManager)
        {
            $entityManager->getRepository('Eternizer_Entity_Entry')->truncateTable();
        });

        // Insertion successful
        return true;
    }

    /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
    protected function registerPersistentEventHandlers()
    {
        // core
        EventUtil::registerPersistentModuleHandler('Eternizer', 'api.method_not_found', array('Eternizer_Listener_Core', 'apiMethodNotFound'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'core.preinit', array('Eternizer_Listener_Core', 'preInit'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'core.init', array('Eternizer_Listener_Core', 'init'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'core.postinit', array('Eternizer_Listener_Core', 'postInit'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'controller.method_not_found', array('Eternizer_Listener_Core', 'controllerMethodNotFound'));

        // installer
        EventUtil::registerPersistentModuleHandler('Eternizer', 'installer.module.installed', array('Eternizer_Listener_Installer', 'moduleInstalled'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'installer.module.upgraded', array('Eternizer_Listener_Installer', 'moduleUpgraded'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'installer.module.uninstalled', array('Eternizer_Listener_Installer', 'moduleUninstalled'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'installer.subscriberarea.uninstalled', array('Eternizer_Listener_Installer', 'subscriberAreaUninstalled'));

        // modules
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module_dispatch.postloadgeneric', array('Eternizer_Listener_ModuleDispatch', 'postLoadGeneric'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module_dispatch.preexecute', array('Eternizer_Listener_ModuleDispatch', 'preExecute'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module_dispatch.postexecute', array('Eternizer_Listener_ModuleDispatch', 'postExecute'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module_dispatch.custom_classname', array('Eternizer_Listener_ModuleDispatch', 'customClassname'));

        // mailer
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.mailer.api.sendmessage', array('Eternizer_Listener_Mailer', 'sendMessage'));

        // page
        EventUtil::registerPersistentModuleHandler('Eternizer', 'pageutil.addvar_filter', array('Eternizer_Listener_Page', 'pageutilAddvarFilter'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'system.outputfilter', array('Eternizer_Listener_Page', 'systemOutputfilter'));

        // errors
        EventUtil::registerPersistentModuleHandler('Eternizer', 'setup.errorreporting', array('Eternizer_Listener_Errors', 'setupErrorReporting'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'systemerror', array('Eternizer_Listener_Errors', 'systemError'));

        // theme
        EventUtil::registerPersistentModuleHandler('Eternizer', 'theme.preinit', array('Eternizer_Listener_Theme', 'preInit'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'theme.init', array('Eternizer_Listener_Theme', 'init'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'theme.load_config', array('Eternizer_Listener_Theme', 'loadConfig'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'theme.prefetch', array('Eternizer_Listener_Theme', 'preFetch'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'theme.postfetch', array('Eternizer_Listener_Theme', 'postFetch'));

        // view
        EventUtil::registerPersistentModuleHandler('Eternizer', 'view.init', array('Eternizer_Listener_View', 'init'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'view.postfetch', array('Eternizer_Listener_View', 'postFetch'));

        // user login
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.login.started', array('Eternizer_Listener_UserLogin', 'started'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.login.veto', array('Eternizer_Listener_UserLogin', 'veto'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.login.succeeded', array('Eternizer_Listener_UserLogin', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.login.failed', array('Eternizer_Listener_UserLogin', 'failed'));

        // user logout
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.logout.succeeded', array('Eternizer_Listener_UserLogout', 'succeeded'));

        // user
        EventUtil::registerPersistentModuleHandler('Eternizer', 'user.gettheme', array('Eternizer_Listener_User', 'getTheme'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'user.account.create', array('Eternizer_Listener_User', 'create'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'user.account.update', array('Eternizer_Listener_User', 'update'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'user.account.delete', array('Eternizer_Listener_User', 'delete'));

        // registration
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.registration.started', array('Eternizer_Listener_UserRegistration', 'started'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.registration.succeeded', array('Eternizer_Listener_UserRegistration', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.ui.registration.failed', array('Eternizer_Listener_UserRegistration', 'failed'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'user.registration.create', array('Eternizer_Listener_UserRegistration', 'create'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'user.registration.update', array('Eternizer_Listener_UserRegistration', 'update'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'user.registration.delete', array('Eternizer_Listener_UserRegistration', 'delete'));

        // users module
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.users.config.updated', array('Eternizer_Listener_Users', 'configUpdated'));

        // group
        EventUtil::registerPersistentModuleHandler('Eternizer', 'group.create', array('Eternizer_Listener_Group', 'create'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'group.update', array('Eternizer_Listener_Group', 'update'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'group.delete', array('Eternizer_Listener_Group', 'delete'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'group.adduser', array('Eternizer_Listener_Group', 'addUser'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'group.removeuser', array('Eternizer_Listener_Group', 'removeUser'));

        // special purposes and 3rd party api support
        EventUtil::registerPersistentModuleHandler('Eternizer', 'get.pending_content', array('Eternizer_Listener_ThirdParty', 'pendingContentListener'));
        EventUtil::registerPersistentModuleHandler('Eternizer', 'module.content.gettypes', array('Eternizer_Listener_ThirdParty', 'contentGetTypes'));
    }
}
