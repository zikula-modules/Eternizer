<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Eternizer
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Wed Jan 04 16:43:44 CET 2012.
 */

/**
 * Installer implementation class
 */
use Doctrine\DBAL\Connection;

class Eternizer_Installer extends Eternizer_Base_Installer
{

    /**
     * Install the Eternizer application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        // create all tables from according entity definitions
        try {
            DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %s module.', array($this->getName())));
        }

        // set up all our vars with initial values
        Eternizer_Util_Controller::setModVars();

        // create the default data for Eternizer
        $this->createDefaultData();

        // register persistent event handlers
        $this->registerPersistentEventHandlers();

        // register hook subscriber bundles
        HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());
        
        // create temp folder eternizer_cache
        $this->createTempDir();

        // initialisation successful
        return true;
    }

    /**
     * Upgrade the Eternizer application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldversion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldversion)
    {
        // Upgrade dependent on old version number
        switch ($oldversion) {
            case '1.0a':
            case '1.0':
            case '1.1':
                $profile = ModUtil::getVar('Eternizer', 'profile');

                if (DataUtil::is_serialized($profile)) {
                    $profile = unserialize($profile);
                }

                $profile = ModUtil::setVar('Eternizer', 'profile', $profile);
            case '1.1.1':

                // remove all module vars
                $this->delVars();

                // create all tables from according entity definitions
                try {
                    DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
                } catch (Exception $e) {
                    if (System::isDevelopmentMode()) {
                        LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                    }
                    return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %s module.', array($this->getName())));
                }

                // set up all our vars with initial values
                Eternizer_Util_Controller::setModVars();

                // create the default data for Eternizer
                $this->createDefaultData();

                // register persistent event handlers
                $this->registerPersistentEventHandlers();

                // register hook subscriber bundles
                HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());
                
            case '1.1.2':
                ModUtil::setVar('Eternizer', 'period', 12);
                ModUtil::setVar('Eternizer', 'simplecaptcha', false);
                $this->createTempDir();
                
            case '1.1.3':
                // later upgrade

                break;
        }

        return true;
    }
    
    // -----------------------------------------------------------------------
    // Create default data for a new install
    // -----------------------------------------------------------------------
    protected function createTempDir()
    {
        $tempdir = System::getVar('temp');
        if(StringUtil::left($tempdir, 1) <> '/') {
            // tempdir does not start with a / which means it does not reside outside
            // the webroot, continue
            if(StringUtil::right($tempdir, 1) <> '/') {
                $tempdir .= '/';
            }
            if(FileUtil::mkdirs($tempdir . 'eternizer_cache', System::getVar('system.chmod_dir', 0777))) {
                $res1 = FileUtil::writeFile($tempdir . 'eternizer_cache/index.html');
                $res2 = FileUtil::writeFile($tempdir . 'eternizer_cache/.htaccess', 'SetEnvIf Request_URI "\.gif$" object_is_gif=gif
SetEnvIf Request_URI "\.png$" object_is_png=png
SetEnvIf Request_URI "\.jpg$" object_is_jpg=jpg
Order deny,allow
Deny from all
Allow from env=object_is_gif
Allow from env=object_is_png
Allow from env=object_is_jpg
');
                if($res1===false || $res2===false){
                    LogUtil::registerStatus($this->__('The installer could not create eternizer_cache/index.html and/or eternizer_cache/.htaccess, please refer to the manual before using the module!'));
                } else {
                    LogUtil::registerStatus($this->__('The installer successfully created the eternizer_cache directory in Zikula\'s temporary directory with a .htaccess file for security in there.'));
                }
            } else {
                LogUtil::registerStatus($this->__('The installer could not create the eternizer_cache directory, please refer to the manual before using the module!'));
            }
        } else {
            // tempdir starts with /, so it is an absolute path, probably outside the webroot
            LogUtil::registerStatus($this->__('The directory \'ztemp\' found outside of the webroot, please consult the manual of how to create the eternizer_cache directory in this case.'));
        }
    
    }
}
