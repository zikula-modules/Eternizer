<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\EternizerModule\Menu\Base;

use Knp\Menu\FactoryInterface;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;
use Zikula\Common\Translator\TranslatorTrait;
use MU\EternizerModule\Entity\EntryEntity;

/**
 * This is the item actions menu implementation class.
 */
class AbstractItemActionsMenu implements ContainerAwareInterface
{
    use ContainerAwareTrait;
    use TranslatorTrait;

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * Builds the menu.
     *
     * @param FactoryInterface $factory Menu factory
     * @param array            $options Additional options
     *
     * @return \Knp\Menu\MenuItem The assembled menu
     */
    public function menu(FactoryInterface $factory, array $options)
    {
        $menu = $factory->createItem('itemActions');
        if (!isset($options['entity']) || !isset($options['area']) || !isset($options['context'])) {
            return $menu;
        }

        $this->setTranslator($this->container->get('translator'));

        $entity = $options['entity'];
        $area = $options['area'];
        $context = $options['context'];

        $permissionApi = $this->container->get('zikula_permissions_module.api.permission');
        $currentUserApi = $this->container->get('zikula_users_module.current_user');
        $menu->setChildrenAttribute('class', 'list-inline');

        
        $currentLegacyControllerType = $area != '' ? $area : 'user';
        $currentFunc = $context;
        
        if ($entity instanceof EntryEntity) {
            $component = 'MUEternizerModule:Entry:';
            $instance = $entity['id'] . '::';
        
        if ($currentLegacyControllerType == 'admin') {
            if (in_array($currentFunc, ['index', 'view'])) {
                $menu->addChild($this->__('Preview'), [
                    'route' => 'mueternizermodule_entry_display',
                    'routeParameters' => ['id' => $entity['id']]
                ])->setAttribute('icon', 'fa fa-search-plus');
                $menu[$this->__('Preview')]->setLinkAttribute('target', '_blank');
                $menu[$this->__('Preview')]->setLinkAttribute('title', $this->__('Open preview page'));
                $menu->addChild($this->__('Details'), [
                    'route' => 'mueternizermodule_entry_admindisplay',
                    'routeParameters' => ['id' => $entity['id']]
                ])->setAttribute('icon', 'fa fa-eye');
                $menu[$this->__('Details')]->setLinkAttribute('title', str_replace('"', '', $entity->getTitleFromDisplayPattern()));
            }
            if (in_array($currentFunc, ['index', 'view', 'display'])) {
                if ($permissionApi->hasPermission($component, $instance, ACCESS_EDIT)) {
                    $menu->addChild($this->__('Edit'), [
                        'route' => 'mueternizermodule_entry_adminedit',
                        'routeParameters' => ['id' => $entity['id']]
                    ])->setAttribute('icon', 'fa fa-pencil-square-o');
                    $menu[$this->__('Edit')]->setLinkAttribute('title', $this->__('Edit this entry'));
                    $menu->addChild($this->__('Reuse'), [
                        'route' => 'mueternizermodule_entry_adminedit',
                        'routeParameters' => ['astemplate' => $entity['id']]
                    ])->setAttribute('icon', 'fa fa-files-o');
                    $menu[$this->__('Reuse')]->setLinkAttribute('title', $this->__('Reuse for new entry'));
                }
                if ($permissionApi->hasPermission($component, $instance, ACCESS_DELETE)) {
                    $menu->addChild($this->__('Delete'), [
                        'route' => 'mueternizermodule_entry_admindelete',
                        'routeParameters' => ['id' => $entity['id']]
                    ])->setAttribute('icon', 'fa fa-trash-o');
                    $menu[$this->__('Delete')]->setLinkAttribute('title', $this->__('Delete this entry'));
                }
            }
            if ($currentFunc == 'display') {
                $title = $this->__('Back to overview');
                $menu->addChild($title, [
                    'route' => 'mueternizermodule_entry_adminview'
                ])->setAttribute('icon', 'fa fa-reply');
                $menu[$title]->setLinkAttribute('title', $title);
            }
        }
        if ($currentLegacyControllerType == 'user') {
            if (in_array($currentFunc, ['index', 'view'])) {
                $menu->addChild($this->__('Details'), [
                    'route' => 'mueternizermodule_entry_display',
                    'routeParameters' => ['id' => $entity['id']]
                ])->setAttribute('icon', 'fa fa-eye');
                $menu[$this->__('Details')]->setLinkAttribute('title', str_replace('"', '', $entity->getTitleFromDisplayPattern()));
            }
            if (in_array($currentFunc, ['index', 'view', 'display'])) {
                if ($permissionApi->hasPermission($component, $instance, ACCESS_EDIT)) {
                    $menu->addChild($this->__('Edit'), [
                        'route' => 'mueternizermodule_entry_edit',
                        'routeParameters' => ['id' => $entity['id']]
                    ])->setAttribute('icon', 'fa fa-pencil-square-o');
                    $menu[$this->__('Edit')]->setLinkAttribute('title', $this->__('Edit this entry'));
                    $menu->addChild($this->__('Reuse'), [
                        'route' => 'mueternizermodule_entry_edit',
                        'routeParameters' => ['astemplate' => $entity['id']]
                    ])->setAttribute('icon', 'fa fa-files-o');
                    $menu[$this->__('Reuse')]->setLinkAttribute('title', $this->__('Reuse for new entry'));
                }
                if ($permissionApi->hasPermission($component, $instance, ACCESS_DELETE)) {
                    $menu->addChild($this->__('Delete'), [
                        'route' => 'mueternizermodule_entry_delete',
                        'routeParameters' => ['id' => $entity['id']]
                    ])->setAttribute('icon', 'fa fa-trash-o');
                    $menu[$this->__('Delete')]->setLinkAttribute('title', $this->__('Delete this entry'));
                }
            }
            if ($currentFunc == 'display') {
                $title = $this->__('Back to overview');
                $menu->addChild($title, [
                    'route' => 'mueternizermodule_entry_view'
                ])->setAttribute('icon', 'fa fa-reply');
                $menu[$title]->setLinkAttribute('title', $title);
            }
        }
        }

        return $menu;
    }
}
