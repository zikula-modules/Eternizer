<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\EternizerModule\Form\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Api\VariableApi;

/**
 * Configuration form type base class.
 */
abstract class AbstractAppSettingsType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var VariableApi
     */
    protected $variableApi;

    /**
     * @var array
     */
    protected $modVars;

    /**
     * AppSettingsType constructor.
     *
     * @param TranslatorInterface $translator  Translator service instance
     * @param VariableApi         $variableApi VariableApi service instance
     */
    public function __construct(TranslatorInterface $translator, VariableApi $variableApi)
    {
        $this->setTranslator($translator);
        $this->variableApi = $variableApi;
        $this->modVars = $this->variableApi->getAll('MUEternizerModule');
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addVariablesFields($builder, $options);

        $builder
            ->add('save', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for variables fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addVariablesFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('pagesize', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Pagesize') . ':',
                'required' => false,
                'data' => $this->modVars['pagesize'],
                'empty_data' => intval('10'),
                'attr' => [
                    'title' => $this->__('Enter the pagesize. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('mail', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
                'label' => $this->__('Mail') . ':',
                'required' => false,
                'data' => $this->modVars['mail'],
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Enter the mail.')
                ],'max_length' => 255
            ])
            ->add('order', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Order') . ':',
                'required' => false,
                'data' => $this->modVars['order'],
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the order.')
                ],'choices' => [
                    $this->__('descending') => 'Descending'
                    ,$this->__('ascending') => 'Ascending'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('moderate', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Moderate') . ':',
                'required' => false,
                'data' => $this->modVars['moderate'],
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the moderate.')
                ],'choices' => [
                    $this->__('nothing') => 'Nothing'
                    ,$this->__('guests') => 'Guests'
                    ,$this->__('all') => 'All'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('formposition', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Formposition') . ':',
                'required' => false,
                'data' => $this->modVars['formposition'],
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the formposition.')
                ],'choices' => [
                    $this->__('above') => 'Above'
                    ,$this->__('below') => 'Below'
                    ,$this->__('menue') => 'Menue'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('ipsave', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Ipsave') . ':',
                'required' => false,
                'data' => (bool)$this->modVars['ipsave'],
                'attr' => [
                    'title' => $this->__('The ipsave option.')
                ],
            ])
            ->add('editentries', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Editentries') . ':',
                'required' => false,
                'data' => (bool)$this->modVars['editentries'],
                'attr' => [
                    'title' => $this->__('The editentries option.')
                ],
            ])
            ->add('period', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Period') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Here we can decide how long a user may edit his entry; input of hours')
                ],
                'help' => $this->__('Here we can decide how long a user may edit his entry; input of hours'),
                'required' => false,
                'data' => $this->modVars['period'],
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the period. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('simplecaptcha', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Simplecaptcha') . ':',
                'required' => false,
                'data' => (bool)$this->modVars['simplecaptcha'],
                'attr' => [
                    'title' => $this->__('The simplecaptcha option.')
                ],
            ])
        ;
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return 'mueternizermodule_appsettings';
    }
}
