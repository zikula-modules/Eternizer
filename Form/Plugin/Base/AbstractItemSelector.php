<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace MU\EternizerModule\Form\Plugin\Base;

use FormUtil;
use PageUtil;
use ServiceUtil;
use Zikula_Form_Plugin_TextInput;
use Zikula_Form_View;
use Zikula_View;

/**
 * Item selector plugin base class.
 */
class AbstractItemSelector extends Zikula_Form_Plugin_TextInput
{
    /**
     * The treated object type.
     *
     * @var string
     */
    public $objectType = '';

    /**
     * Identifier of selected object.
     *
     * @var integer
     */
    public $selectedItemId = 0;

    /**
     * Get filename of this file.
     * The information is used to re-establish the plugins on postback.
     *
     * @return string
     */
    public function getFilename()
    {
        return __FILE__;
    }

    /**
     * Create event handler.
     *
     * @param Zikula_Form_View $view    Reference to Zikula_Form_View object
     * @param array            &$params Parameters passed from the Smarty plugin function
     *
     * @see    Zikula_Form_AbstractPlugin
     *
     * @return void
     */
    public function create(Zikula_Form_View $view, &$params)
    {
        $params['maxLength'] = 11;
        /*$params['width'] = '8em';*/

        // let parent plugin do the work in detail
        parent::create($view, $params);
    }

    /**
     * Helper method to determine css class.
     *
     * @see    Zikula_Form_Plugin_TextInput
     *
     * @return string the list of css classes to apply
     */
    protected function getStyleClass()
    {
        $class = parent::getStyleClass();

        return str_replace('z-form-text', 'z-form-itemlist ' . strtolower($this->objectType), $class);
    }

    /**
     * Render event handler.
     *
     * @param Zikula_Form_View $view Reference to Zikula_Form_View object
     *
     * @return string The rendered output
     */
    public function render(Zikula_Form_View $view)
    {
        static $firstTime = true;
        if ($firstTime) {
            PageUtil::addVar('javascript', 'jquery');
            PageUtil::addVar('javascript', 'web/bootstrap-media-lightbox/bootstrap-media-lightbox.min.js');
            PageUtil::addVar('stylesheet', 'web/bootstrap-media-lightbox/bootstrap-media-lightbox.css');
            PageUtil::addVar('javascript', '@MUEternizerModule/Resources/public/js/MUEternizerModule.Finder.js');
            PageUtil::addVar('stylesheet', '@MUEternizerModule/Resources/public/css/style.css');
        }
        $firstTime = false;

        $serviceManager = ServiceUtil::getManager();
        $permissionApi = $serviceManager->get('zikula_permissions_module.api.permission');

        if (!$permissionApi->hasPermission('MUEternizerModule:' . ucfirst($this->objectType) . ':', '::', ACCESS_COMMENT)) {
            return false;
        }

        $this->selectedItemId = $this->text;

        $serviceManager = ServiceUtil::getManager();
        $repository = $serviceManager->get('mu_eternizer_module.' . $this->objectType . '_factory')->getRepository();

        $sort = $repository->getDefaultSortingField();
        $sdir = 'asc';

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' ' . $sdir;

        $entities = $repository->selectWhere($where, $sortParam);

        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->assign('objectType', $this->objectType)
             ->assign('items', $entities)
             ->assign('selectedId', $this->selectedItemId);

        return $view->fetch('External/' . ucfirst($this->objectType) . '/select.tpl');
    }

    /**
     * Decode event handler.
     *
     * @param Zikula_Form_View $view Zikula_Form_View object
     *
     * @return void
     */
    public function decode(Zikula_Form_View $view)
    {
        parent::decode($view);
        $this->objectType = FormUtil::getPassedValue('MUEternizerModule_objecttype', 'entry', 'POST');
        $this->selectedItemId = $this->text;
    }
}
