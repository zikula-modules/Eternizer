<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace MU\EternizerModule\ContentType\Base;

use ModUtil;
use ServiceUtil;
use ZLanguage;

/**
 * Generic single item display content plugin base class.
 */
class Item extends \Content_AbstractContentType
{
    protected $objectType;
    protected $id;
    protected $displayMode;
    
    /**
     * Returns the module providing this content type.
     *
     * @return string The module name.
     */
    public function getModule()
    {
        return 'MUEternizerModule';
    }
    
    /**
     * Returns the name of this content type.
     *
     * @return string The content type name.
     */
    public function getName()
    {
        return 'Item';
    }
    
    /**
     * Returns the title of this content type.
     *
     * @return string The content type title.
     */
    public function getTitle()
    {
        $dom = ZLanguage::getModuleDomain('MUEternizerModule');
    
        return __('MUEternizerModule detail view', $dom);
    }
    
    /**
     * Returns the description of this content type.
     *
     * @return string The content type description.
     */
    public function getDescription()
    {
        $dom = ZLanguage::getModuleDomain('MUEternizerModule');
    
        return __('Display or link a single MUEternizerModule object.', $dom);
    }
    
    /**
     * Loads the data.
     *
     * @param array $data Data array with parameters.
     */
    public function loadData(&$data)
    {
        $serviceManager = ServiceUtil::getManager();
        $controllerHelper = $serviceManager->get('mueternizermodule.controller_helper');
    
        $utilArgs = array('name' => 'detail');
        if (!isset($data['objectType']) || !in_array($data['objectType'], $controllerHelper->getObjectTypes('contentType', $utilArgs))) {
            $data['objectType'] = $controllerHelper->getDefaultObjectType('contentType', $utilArgs);
        }
    
        $this->objectType = $data['objectType'];
    
        if (!isset($data['id'])) {
            $data['id'] = null;
        }
        if (!isset($data['displayMode'])) {
            $data['displayMode'] = 'embed';
        }
    
        $this->id = $data['id'];
        $this->displayMode = $data['displayMode'];
    }
    
    /**
     * Displays the data.
     *
     * @return string The returned output.
     */
    public function display()
    {
        if ($this->id != null && !empty($this->displayMode)) {
            return ModUtil::func('MUEternizerModule', 'external', 'display', $this->getDisplayArguments());
        }
    
        return '';
    }
    
    /**
     * Displays the data for editing.
     */
    public function displayEditing()
    {
        if ($this->id != null && !empty($this->displayMode)) {
            return ModUtil::func('MUEternizerModule', 'external', 'display', $this->getDisplayArguments());
        }
        $dom = ZLanguage::getModuleDomain('MUEternizerModule');
    
        return __('No item selected.', $dom);
    }
    
    /**
     * Returns common arguments for display data selection with the external api.
     *
     * @return array Display arguments.
     */
    protected function getDisplayArguments()
    {
        return array('objectType' => $this->objectType,
                     'source' => 'contentType',
                     'displayMode' => $this->displayMode,
                     'id' => $this->id
        );
    }
    
    /**
     * Returns the default data.
     *
     * @return array Default data and parameters.
     */
    public function getDefaultData()
    {
        return array('objectType' => 'entry',
                     'id' => null,
                     'displayMode' => 'embed');
    }
    
    /**
     * Executes additional actions for the editing mode.
     */
    public function startEditing()
    {
        // ensure our custom plugins are loaded
        array_push($this->view->plugins_dir, 'modules/Resources/views//plugins');
    
        // required as parameter for the item selector plugin
        $this->view->assign('objectType', $this->objectType);
    }
}
