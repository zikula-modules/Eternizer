<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace MU\EternizerModule\Controller\Base;

use MU\EternizerModule\Form\Handler\Admin\ConfigHandler;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpFoundation\RedirectResponse;
use JCSSUtil;
use ModUtil;
use System;
use UserUtil;
use Zikula_View;
use ZLanguage;
use Zikula\Core\Controller\AbstractController;
use Zikula\Core\Hook\ProcessHook;
use Zikula\Core\Hook\ValidationHook;
use Zikula\Core\Hook\ValidationProviders;
use Zikula\Core\RouteUrl;
use Zikula\Core\Response\PlainResponse;

/**
 * Admin controller class.
 */
class AdminController extends AbstractController
{

    /**
     * This is the default action handling the mainnull area called without defining arguments.
     *
     * @param Request  $request      Current request instance
     * @param string  $ot           Treated object type.
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     */
    public function indexAction(Request $request)
    {
        // parameter specifying which type of objects we are treating
        $objectType = $request->query->getAlnum('ot', 'entry');
        
        $permLevel = ACCESS_ADMIN;
        if (!$this->hasPermission($this->name . '::', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        
        // redirect to view action
        $routeArea = 'admin';
        $redirectUrl = $this->get('router')->generate('mueternizermodule_' . strtolower($objectType) . '_' . $routeArea . 'view');
        
        return new RedirectResponse(System::normalizeUrl($redirectUrl));
    }


    /**
     * This method cares for a redirect within an inline frame.
     *
     * @param string  $idPrefix    Prefix for inline window element identifier.
     * @param string  $commandName Name of action to be performed (create or edit).
     * @param integer $id          Id of created item (used for activating auto completion after closing the modal window).
     *
     * @return boolean Whether the inline redirect has been performed or not.
     */
    public function handleInlineRedirectAction($idPrefix, $commandName, $id = 0)
    {
        $id = (int) $this->request->query->filter('id', 0, false, FILTER_VALIDATE_INT);
        $idPrefix = $this->request->query->filter('idPrefix', '', false, FILTER_SANITIZE_STRING);
        $commandName = $this->request->query->filter('commandName', '', false, FILTER_SANITIZE_STRING);
        if (empty($idPrefix)) {
            return false;
        }
        
        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->assign('itemId', $id)
             ->assign('idPrefix', $idPrefix)
             ->assign('commandName', $commandName)
             ->assign('jcssConfig', JCSSUtil::getJSConfig());
        
        return new PlainResponse($view->fetch('Admin/inlineRedirectHandler.tpl'));
    }

    /**
     * This method takes care of the application configuration.
     *
     * @return string Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function configAction()
    {
        if (!$this->hasPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }
        
        // Create new Form reference
        $view = \FormUtil::newForm($this->name, $this);
        
        $templateName = 'Admin/config.tpl';
        
        // Execute form using supplied template and page event handler
        return $this->response($view->execute($templateName, new ConfigHandler()));
    }
}
