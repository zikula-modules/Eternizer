<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace MU\EternizerModule\Controller\Base;

use MU\EternizerModule\Entity\EntryEntity;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Cache;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use FormUtil;
use JCSSUtil;
use ModUtil;
use System;
use UserUtil;
use Zikula_View;
use ZLanguage;
use Zikula\Component\SortableColumns\Column;
use Zikula\Component\SortableColumns\SortableColumns;
use Zikula\Core\Controller\AbstractController;
use Zikula\Core\Hook\ProcessHook;
use Zikula\Core\Hook\ValidationHook;
use Zikula\Core\Hook\ValidationProviders;
use Zikula\Core\ModUrl;
use Zikula\Core\RouteUrl;
use Zikula\Core\Response\PlainResponse;
use Zikula\Core\Theme\Annotation\Theme;

/**
 * Entry controller base class.
 */
class EntryController extends AbstractController
{
    /**
     * This is the default action handling the main admin area called without defining arguments.
     * @Theme("admin")
     * @Cache(expires="+7 days", public=true)
     *
     * @param Request  $request      Current request instance
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     */
    public function adminIndexAction(Request $request)
    {
        return $this->indexInternal($request, true);
    }
    
    /**
     * This is the default action handling the mainnull area called without defining arguments.
     * @Cache(expires="+7 days", public=true)
     *
     * @param Request  $request      Current request instance
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     */
    public function indexAction(Request $request)
    {
        return $this->indexInternal($request, false);
    }
    
    /**
     * This method includes the common implementation code for adminIndex() and index().
     */
    protected function indexInternal(Request $request, $isAdmin = false)
    {
        $controllerHelper = $this->get('mueternizermodule.controller_helper');
        
        // parameter specifying which type of objects we are treating
        $objectType = 'entry';
        $utilArgs = array('controller' => 'entry', 'action' => 'main');
        $permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_OVERVIEW;
        if (!$this->hasPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        
        if ($isAdmin) {
            
            $redirectUrl = $this->get('router')->generate('mueternizermodule_entry_' . ($isAdmin ? 'admin' : '') . 'view');
            
            return new RedirectResponse(System::normalizeUrl($redirectUrl));
        }
        
        if (!$isAdmin) {
            
            $redirectUrl = $this->get('router')->generate('mueternizermodule_entry_' . ($isAdmin ? 'admin' : '') . 'view');
            
            return new RedirectResponse(System::normalizeUrl($redirectUrl));
        }
        
        // set caching id
        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->setCacheId('entry_index');
        
        // return index template
        return $this->response($view->fetch('Entry/index.tpl'));
    }
    /**
     * This action provides an item list overview in the admin area.
     * @Theme("admin")
     * @Cache(expires="+2 hours", public=false)
     *
     * @param Request  $request      Current request instance
     * @param string  $sort         Sorting field.
     * @param string  $sortdir      Sorting direction.
     * @param int     $pos          Current pager position.
     * @param int     $num          Amount of entries to display.
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     */
    public function adminViewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return $this->viewInternal($request, $sort, $sortdir, $pos, $num, true);
    }
    
    /**
     * This action provides an item list overviewnull.
     * @Cache(expires="+2 hours", public=false)
     *
     * @param Request  $request      Current request instance
     * @param string  $sort         Sorting field.
     * @param string  $sortdir      Sorting direction.
     * @param int     $pos          Current pager position.
     * @param int     $num          Amount of entries to display.
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     */
    public function viewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return $this->viewInternal($request, $sort, $sortdir, $pos, $num, false);
    }
    
    /**
     * This method includes the common implementation code for adminView() and view().
     */
    protected function viewInternal(Request $request, $sort, $sortdir, $pos, $num, $isAdmin = false)
    {
        $controllerHelper = $this->get('mueternizermodule.controller_helper');
        
        // parameter specifying which type of objects we are treating
        $objectType = 'entry';
        $utilArgs = array('controller' => 'entry', 'action' => 'view');
        $permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_READ;
        if (!$this->hasPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        // temporary workarounds
        // let repository know if we are in admin or user area
        $request->query->set('lct', $isAdmin ? 'admin' : 'user');
        // let entities know if we are in admin or user area
        System::queryStringSetVar('lct', $isAdmin ? 'admin' : 'user');
        
        $repository = $this->get('mueternizermodule.' . $objectType . '_factory')->getRepository();
        $repository->setRequest($request);
        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->assign('routeArea', $isAdmin ? 'admin' : '');
        $viewHelper = $this->get('mueternizermodule.view_helper');
        
        // convenience vars to make code clearer
        $currentUrlArgs = array();
        $where = '';
        
        $showOwnEntries = $request->query->getInt('own', $this->getVar('showOnlyOwnEntries', 0));
        $showAllEntries = $request->query->getInt('all', 0);
        
        if (!$showAllEntries) {
            $csv = $request->getRequestFormat() == 'csv' ? 1 : 0;
            if ($csv == 1) {
                $showAllEntries = 1;
            }
        }
        
        $view->assign('showOwnEntries', $showOwnEntries)
             ->assign('showAllEntries', $showAllEntries);
        if ($showOwnEntries == 1) {
            $currentUrlArgs['own'] = 1;
        }
        if ($showAllEntries == 1) {
            $currentUrlArgs['all'] = 1;
        }
        
        $additionalParameters = $repository->getAdditionalTemplateParameters('controllerAction', $utilArgs);
        
        $resultsPerPage = 0;
        if ($showAllEntries != 1) {
            // the number of items displayed on a page for pagination
            $resultsPerPage = $num;
            if ($resultsPerPage == 0) {
                $resultsPerPage = $this->getVar('pageSize', 10);
            }
        }
        
        // parameter for used sorting field
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
            System::queryStringSetVar('sort', $sort);
            $request->query->set('sort', $sort);
            // set default sorting in route parameters (e.g. for the pager)
            $routeParams = $request->attributes->get('_route_params');
            $routeParams['sort'] = $sort;
            $request->attributes->set('_route_params', $routeParams);
        }
        
        // parameter for used sort order
        $sortdir = strtolower($sortdir);
        
        $sortableColumns = new SortableColumns($this->get('router'), 'mueternizermodule_entry_' . ($isAdmin ? 'admin' : '') . 'view', 'sort', 'sortdir');
        $sortableColumns->addColumn(new Column('ip'));
        $sortableColumns->addColumn(new Column('name'));
        $sortableColumns->addColumn(new Column('email'));
        $sortableColumns->addColumn(new Column('homepage'));
        $sortableColumns->addColumn(new Column('location'));
        $sortableColumns->addColumn(new Column('text'));
        $sortableColumns->addColumn(new Column('notes'));
        $sortableColumns->addColumn(new Column('obj_status'));
        $sortableColumns->addColumn(new Column('createdUserId'));
        $sortableColumns->addColumn(new Column('createdDate'));
        $sortableColumns->addColumn(new Column('updatedUserId'));
        $sortableColumns->addColumn(new Column('updatedDate'));
        $sortableColumns->setOrderBy($sortableColumns->getColumn($sort), strtoupper($sortdir));
        
        $additionalUrlParameters = array(
            'all' => $showAllEntries,
            'own' => $showOwnEntries,
            'pageSize' => $resultsPerPage
        );
        $additionalUrlParameters = array_merge($additionalUrlParameters, $additionalParameters);
        $sortableColumns->setAdditionalUrlParameters($additionalUrlParameters);
        
        $selectionArgs = array(
            'ot' => $objectType,
            'where' => $where,
            'orderBy' => $sort . ' ' . $sortdir
        );
        
        // prepare access level for cache id
        $accessLevel = ACCESS_READ;
        $component = 'MUEternizerModule:' . ucfirst($objectType) . ':';
        $instance = '::';
        if ($this->hasPermission($component, $instance, ACCESS_COMMENT)) {
            $accessLevel = ACCESS_COMMENT;
        }
        if ($this->hasPermission($component, $instance, ACCESS_EDIT)) {
            $accessLevel = ACCESS_EDIT;
        }
        
        $templateFile = $viewHelper->getViewTemplate($view, $objectType, 'view', $request);
        $cacheId = $objectType . '_view|_sort_' . $sort . '_' . $sortdir;
        if ($showAllEntries == 1) {
            // set cache id
            $view->setCacheId($cacheId . '_all_1_own_' . $showOwnEntries . '_' . $accessLevel);
        
            // if page is cached return cached content
            if ($view->is_cached($templateFile)) {
                return $viewHelper->processTemplate($view, $objectType, 'view', $request, $templateFile);
            }
        
            // retrieve item list without pagination
            $entities = ModUtil::apiFunc($this->name, 'selection', 'getEntities', $selectionArgs);
        } else {
            // the current offset which is used to calculate the pagination
            $currentPage = $pos;
        
            // set cache id
            $view->setCacheId($cacheId . '_amount_' . $resultsPerPage . '_page_' . $currentPage . '_own_' . $showOwnEntries . '_' . $accessLevel);
        
            // if page is cached return cached content
            if ($view->is_cached($templateFile)) {
                return $viewHelper->processTemplate($view, $objectType, 'view', $request, $templateFile);
            }
        
            // retrieve item list with pagination
            $selectionArgs['currentPage'] = $currentPage;
            $selectionArgs['resultsPerPage'] = $resultsPerPage;
            list($entities, $objectCount) = ModUtil::apiFunc($this->name, 'selection', 'getEntitiesPaginated', $selectionArgs);
        
            $view->assign('currentPage', $currentPage)
                 ->assign('pager', array('numitems'     => $objectCount,
                                         'itemsperpage' => $resultsPerPage));
        }
        
        foreach ($entities as $k => $entity) {
            $entity->initWorkflow();
        }
        
        // build ModUrl instance for display hooks
        $currentUrlObject = new ModUrl($this->name, 'entry', 'view', ZLanguage::getLanguageCode(), $currentUrlArgs);
        
        // assign the object data, sorting information and details for creating the pager
        $view->assign('items', $entities)
             ->assign('sort', $sortableColumns->generateSortableColumns())
             ->assign('sdir', $sortdir)
             ->assign('pageSize', $resultsPerPage)
             ->assign('currentUrlObject', $currentUrlObject)
             ->assign($additionalParameters);
        
        $modelHelper = $this->get('mueternizermodule.model_helper');
        $view->assign('canBeCreated', $modelHelper->canBeCreated($objectType));
        
        // fetch and return the appropriate template
        return $viewHelper->processTemplate($view, $objectType, 'view', $request, $templateFile);
    }
    /**
     * This action provides a item detail view in the admin area.
     * @Theme("admin")
     * @ParamConverter("entry", class="MUEternizerModule:EntryEntity", options={"id" = "id", "repository_method" = "selectById"})
     * @Cache(lastModified="entry.getUpdatedDate()", ETag="'Entry' ~ entry.getid() ~ entry.getUpdatedDate().format('U')")
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance.
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     * @throws NotFoundHttpException Thrown by param converter if item to be displayed isn't found.
     */
    public function adminDisplayAction(Request $request, EntryEntity $entry)
    {
        return $this->displayInternal($request, $entry, true);
    }
    
    /**
     * This action provides a item detail viewnull.
     * @ParamConverter("entry", class="MUEternizerModule:EntryEntity", options={"id" = "id", "repository_method" = "selectById"})
     * @Cache(lastModified="entry.getUpdatedDate()", ETag="'Entry' ~ entry.getid() ~ entry.getUpdatedDate().format('U')")
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance.
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     * @throws NotFoundHttpException Thrown by param converter if item to be displayed isn't found.
     */
    public function displayAction(Request $request, EntryEntity $entry)
    {
        return $this->displayInternal($request, $entry, false);
    }
    
    /**
     * This method includes the common implementation code for adminDisplay() and display().
     */
    protected function displayInternal(Request $request, EntryEntity $entry, $isAdmin = false)
    {
        $controllerHelper = $this->get('mueternizermodule.controller_helper');
        
        // parameter specifying which type of objects we are treating
        $objectType = 'entry';
        $utilArgs = array('controller' => 'entry', 'action' => 'display');
        $permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_READ;
        if (!$this->hasPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        // temporary workarounds
        // let repository know if we are in admin or user area
        $request->query->set('lct', $isAdmin ? 'admin' : 'user');
        // let entities know if we are in admin or user area
        System::queryStringSetVar('lct', $isAdmin ? 'admin' : 'user');
        
        $repository = $this->get('mueternizermodule.' . $objectType . '_factory')->getRepository();
        $repository->setRequest($request);
        
        $entity = $entry;
        
        
        $entity->initWorkflow();
        
        // build ModUrl instance for display hooks; also create identifier for permission check
        $currentUrlArgs = $entity->createUrlArgs();
        $instanceId = $entity->createCompositeIdentifier();
        $currentUrlArgs['id'] = $instanceId; // TODO remove this
        $currentUrlObject = new ModUrl($this->name, 'entry', 'display', ZLanguage::getLanguageCode(), $currentUrlArgs);
        
        if (!$this->hasPermission($this->name . ':' . ucfirst($objectType) . ':', $instanceId . '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        
        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->assign('routeArea', $isAdmin ? 'admin' : '');
        $viewHelper = $this->get('mueternizermodule.view_helper');
        $templateFile = $viewHelper->getViewTemplate($view, $objectType, 'display', $request);
        
        // set cache id
        $component = $this->name . ':' . ucfirst($objectType) . ':';
        $instance = $instanceId . '::';
        $accessLevel = ACCESS_READ;
        if ($this->hasPermission($component, $instance, ACCESS_COMMENT)) {
            $accessLevel = ACCESS_COMMENT;
        }
        if ($this->hasPermission($component, $instance, ACCESS_EDIT)) {
            $accessLevel = ACCESS_EDIT;
        }
        $view->setCacheId($objectType . '_display|' . $instanceId . '|a' . $accessLevel);
        
        // assign output data to view object.
        $view->assign($objectType, $entity)
             ->assign('currentUrlObject', $currentUrlObject)
             ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
        
        // fetch and return the appropriate template
        return $viewHelper->processTemplate($view, $objectType, 'display', $request, $templateFile);
    }
    /**
     * This action provides a handling of edit requests in the admin area.
     * @Theme("admin")
     * @Cache(lastModified="entry.getUpdatedDate()", ETag="'Entry' ~ entry.getid() ~ entry.getUpdatedDate().format('U')")
     *
     * @param Request  $request      Current request instance
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     * @throws NotFoundHttpException Thrown by form handler if item to be edited isn't found.
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available).
     */
    public function adminEditAction(Request $request)
    {
        return $this->editInternal($request, true);
    }
    
    /**
     * This action provides a handling of edit requestsnull.
     * @Cache(lastModified="entry.getUpdatedDate()", ETag="'Entry' ~ entry.getid() ~ entry.getUpdatedDate().format('U')")
     *
     * @param Request  $request      Current request instance
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     * @throws NotFoundHttpException Thrown by form handler if item to be edited isn't found.
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available).
     */
    public function editAction(Request $request)
    {
        return $this->editInternal($request, false);
    }
    
    /**
     * This method includes the common implementation code for adminEdit() and edit().
     */
    protected function editInternal(Request $request, $isAdmin = false)
    {
        $controllerHelper = $this->get('mueternizermodule.controller_helper');
        
        // parameter specifying which type of objects we are treating
        $objectType = 'entry';
        $utilArgs = array('controller' => 'entry', 'action' => 'edit');
        $permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_EDIT;
        if (!$this->hasPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        
        // create new Form reference
        $view = FormUtil::newForm($this->name, $this);
        
        // build form handler class name
        $handlerClass = '\\MU\\EternizerModule\\Form\\Handler\\Entry\\EditHandler';
        
        // determine the output template
        $view->assign('routeArea', $isAdmin ? 'admin' : '');
        $viewHelper = $this->get('mueternizermodule.view_helper');
        $template = $viewHelper->getViewTemplate($view, $objectType, 'edit', $request);
        
        // temporary workaround until Symfony forms are adopted (#416)
        // let legacy forms know if we are in admin or user area
        $request->query->set('lct', $isAdmin ? 'admin' : 'user');
        
        // execute form using supplied template and page event handler
        return $this->response($view->execute($template, new $handlerClass()));
    }
    /**
     * This action provides a handling of simple delete requests in the admin area.
     * @Theme("admin")
     * @ParamConverter("entry", class="MUEternizerModule:EntryEntity", options={"id" = "id", "repository_method" = "selectById"})
     * @Cache(lastModified="entry.getUpdatedDate()", ETag="'Entry' ~ entry.getid() ~ entry.getUpdatedDate().format('U')")
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance.
     * @param boolean $confirmation Confirm the deletion, else a confirmation page is displayed.
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     * @throws NotFoundHttpException Thrown by param converter if item to be deleted isn't found.
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available).
     */
    public function adminDeleteAction(Request $request, EntryEntity $entry)
    {
        return $this->deleteInternal($request, $entry, true);
    }
    
    /**
     * This action provides a handling of simple delete requestsnull.
     * @ParamConverter("entry", class="MUEternizerModule:EntryEntity", options={"id" = "id", "repository_method" = "selectById"})
     * @Cache(lastModified="entry.getUpdatedDate()", ETag="'Entry' ~ entry.getid() ~ entry.getUpdatedDate().format('U')")
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance.
     * @param boolean $confirmation Confirm the deletion, else a confirmation page is displayed.
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     *
     * @return mixed Output.
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions.
     * @throws NotFoundHttpException Thrown by param converter if item to be deleted isn't found.
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available).
     */
    public function deleteAction(Request $request, EntryEntity $entry)
    {
        return $this->deleteInternal($request, $entry, false);
    }
    
    /**
     * This method includes the common implementation code for adminDelete() and delete().
     */
    protected function deleteInternal(Request $request, EntryEntity $entry, $isAdmin = false)
    {
        $controllerHelper = $this->get('mueternizermodule.controller_helper');
        
        // parameter specifying which type of objects we are treating
        $objectType = 'entry';
        $utilArgs = array('controller' => 'entry', 'action' => 'delete');
        $permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_DELETE;
        if (!$this->hasPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel)) {
            throw new AccessDeniedException();
        }
        $entity = $entry;
        
        $entity->initWorkflow();
        
        // determine available workflow actions
        $workflowHelper = $this->get('mueternizermodule.workflow_helper');
        $actions = $workflowHelper->getActionsForObject($entity);
        if ($actions === false || !is_array($actions)) {
            $this->request->getSession()->getFlashBag()->add('error', $this->__('Error! Could not determine workflow actions.'));
            $logger = $this->get('logger');
            $logger->error('{app}: User {user} tried to delete the {entity} with id {id}, but failed to determine available workflow actions.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $entity->createCompositeIdentifier()));
            throw new \RuntimeException($this->__('Error! Could not determine workflow actions.'));
        }
        
        // check whether deletion is allowed
        $deleteActionId = 'delete';
        $deleteAllowed = false;
        foreach ($actions as $actionId => $action) {
            if ($actionId != $deleteActionId) {
                continue;
            }
            $deleteAllowed = true;
            break;
        }
        if (!$deleteAllowed) {
            $this->request->getSession()->getFlashBag()->add('error', $this->__('Error! It is not allowed to delete this entry.'));
            $logger = $this->get('logger');
            $logger->error('{app}: User {user} tried to delete the {entity} with id {id}, but this action was not allowed.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $entity->createCompositeIdentifier()));
        }
        
        $confirmation = $request->request->getBoolean('confirmation', false);
        if ($confirmation && $deleteAllowed) {
            $this->checkCsrfToken();
        
            $hasErrors = false;
            if ($entity->supportsHookSubscribers()) {
                $hookAreaPrefix = $entity->getHookAreaPrefix();
                $hookType = 'validate_delete';
                // Let any hooks perform additional validation actions
                $hook = new ValidationHook(new ValidationProviders());
                $validators = $this->dispatchHooks($hookAreaPrefix . '.' . $hookType, $hook)->getValidators();
                $hasErrors = $validators->hasErrors();
            }
        
            if (!$hasErrors) {
                // execute the workflow action
                $success = $workflowHelper->executeAction($entity, $deleteActionId);
                if ($success) {
                    $this->request->getSession()->getFlashBag()->add('status', $this->__('Done! Item deleted.'));
                    $logger = $this->get('logger');
                    $logger->notice('{app}: User {user} deleted the {entity} with id {id}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $entity->createCompositeIdentifier()));
                }
        
                if ($entity->supportsHookSubscribers()) {
                    // Let any hooks know that we have created, updated or deleted the entry
                    $hookType = 'process_delete';
                    $hook = new ProcessHook($entity->createCompositeIdentifier());
                    $this->dispatchHooks($hookAreaPrefix . '.' . $hookType, $hook);
                }
        
                // The entry was deleted, so we clear all cached pages this item.
                $cacheArgs = array('ot' => $objectType, 'item' => $entity);
                ModUtil::apiFunc($this->name, 'cache', 'clearItemCache', $cacheArgs);
        
                if ($isAdmin) {
                    // redirect to the list of entries
                    $redirectUrl = $this->get('router')->generate('mueternizermodule_entry_' . ($isAdmin ? 'admin' : '') . 'view');
                } else {
                    // redirect to the list of entries
                    $redirectUrl = $this->get('router')->generate('mueternizermodule_entry_' . ($isAdmin ? 'admin' : '') . 'view');
                }
                return new RedirectResponse(System::normalizeUrl($redirectUrl));
            }
        }
        
        $repository = $this->get('mueternizermodule.' . $objectType . '_factory')->getRepository();
        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->assign('routeArea', $isAdmin ? 'admin' : '');
        
        // set caching id
        $view->setCaching(Zikula_View::CACHE_DISABLED);
        
        // assign the object we loaded above
        $view->assign($objectType, $entity)
             ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
        
        // fetch and return the appropriate template
        $viewHelper = $this->get('mueternizermodule.view_helper');
        
        return $viewHelper->processTemplate($view, $objectType, 'delete', $request);
    }

    /**
     * Process status changes for multiple items.
     *
     * This function processes the items selected in the admin view page.
     * Multiple items may have their state changed or be deleted.
     *
     * @param string $action The action to be executed.
     * @param array  $items  Identifier list of the items to be processed.
     *
     * @return bool true on sucess, false on failure.
     *
     * @throws RuntimeException Thrown if executing the workflow action fails
     */
    public function handleSelectedEntriesAction(Request $request)
    {
        $this->checkCsrfToken();
        
        $redirectUrl = $this->get('router')->generate('mueternizermodule_entry_adminindex');
        
        $objectType = 'entry';
        
        // Get parameters
        $action = $request->request->get('action', null);
        $items = $request->request->get('items', null);
        
        $action = strtolower($action);
        
        $workflowHelper = $this->get('mueternizermodule.workflow_helper');
        
        // process each item
        foreach ($items as $itemid) {
            // check if item exists, and get record instance
            $selectionArgs = array('ot' => $objectType,
                                   'id' => $itemid,
                                   'useJoins' => false);
            $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', $selectionArgs);
        
            $entity->initWorkflow();
        
            // check if $action can be applied to this entity (may depend on it's current workflow state)
            $allowedActions = $workflowHelper->getActionsForObject($entity);
            $actionIds = array_keys($allowedActions);
            if (!in_array($action, $actionIds)) {
                // action not allowed, skip this object
                continue;
            }
        
            $hookAreaPrefix = $entity->getHookAreaPrefix();
        
            // Let any hooks perform additional validation actions
            $hookType = $action == 'delete' ? 'validate_delete' : 'validate_edit';
            $hook = new ValidationHook(new ValidationProviders());
            $validators = $this->dispatchHooks($hookAreaPrefix . '.' . $hookType, $hook)->getValidators();
            if ($validators->hasErrors()) {
                continue;
            }
        
            $success = false;
            try {
                if (!$entity->validate()) {
                    continue;
                }
                // execute the workflow action
                $success = $workflowHelper->executeAction($entity, $action);
            } catch(\Exception $e) {
                $this->request->getSession()->getFlashBag()->add('error', $this->__f('Sorry, but an unknown error occured during the %s action. Please apply the changes again!', array($action)));
                $logger = $this->get('logger');
                $logger->error('{app}: User {user} tried to execute the {action} workflow action for the {entity} with id {id}, but failed. Error details: {errorMessage}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'action' => $action, 'entity' => 'entry', 'id' => $itemid, 'errorMessage' => $e->getMessage()));
            }
        
            if (!$success) {
                continue;
            }
        
            if ($action == 'delete') {
                $this->request->getSession()->getFlashBag()->add('status', $this->__('Done! Item deleted.'));
                $logger = $this->get('logger');
                $logger->notice('{app}: User {user} deleted the {entity} with id {id}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'entry', 'id' => $itemid));
            } else {
                $this->request->getSession()->getFlashBag()->add('status', $this->__('Done! Item updated.'));
                $logger = $this->get('logger');
                $logger->notice('{app}: User {user} executed the {action} workflow action for the {entity} with id {id}.', array('app' => 'MUEternizerModule', 'user' => UserUtil::getVar('uname'), 'action' => $action, 'entity' => 'entry', 'id' => $itemid));
            }
        
            // Let any hooks know that we have updated or deleted an item
            $hookType = $action == 'delete' ? 'process_delete' : 'process_edit';
            $url = null;
            if ($action != 'delete') {
                $urlArgs = $entity->createUrlArgs();
                $url = new RouteUrl('mueternizermodule_entry_display', $urlArgs);
            }
            $hook = new ProcessHook($entity->createCompositeIdentifier(), $url);
            $this->dispatchHooks($hookAreaPrefix . '.' . $hookType, $hook);
        
            // An item was updated or deleted, so we clear all cached pages for this item.
            $cacheArgs = array('ot' => $objectType, 'item' => $entity);
            ModUtil::apiFunc($this->name, 'cache', 'clearItemCache', $cacheArgs);
        }
        
        // clear view cache to reflect our changes
        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->clear_cache();
        
        return new RedirectResponse(System::normalizeUrl($redirectUrl));
    }

    /**
     * This method cares for a redirect within an inline frame.
     *
     * @param string  $idPrefix    Prefix for inline window element identifier.
     * @param string  $commandName Name of action to be performed (create or edit).
     * @param integer $id          Id of created item (used for activating auto completion after closing the modal window).
     *
     * @return boolean Whether the inline redirect has been performed or not.
     */
    public function handleInlineRedirectAction($idPrefix, $commandName, $id = 0)
    {
        if (empty($idPrefix)) {
            return false;
        }
        
        $view = Zikula_View::getInstance('MUEternizerModule', false);
        $view->assign('itemId', $id)
             ->assign('idPrefix', $idPrefix)
             ->assign('commandName', $commandName)
             ->assign('jcssConfig', JCSSUtil::getJSConfig());
        
        return new PlainResponse($view->fetch('Entry/inlineRedirectHandler.tpl'));
    }
}
