<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace MU\EternizerModule\Api;

use MU\EternizerModule\MUEternizerModule;
use MU\EternizerModule\Util;

use ModUtil;
use Zikula\Core\Api\AbstractApi;
use ServiceUtil;

use MU\EternizerModule\Api\Base\SelectionApi as BaseSelectionApi;

/**
 * Selection api implementation class.
 */
class SelectionApi extends BaseSelectionApi
{
    /**
     * Select a list of entities by different criteria.
     *
     * @param string  $args['ot']       The object type to retrieve (optional)
     * @param string  $args['where']    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $args['orderBy']  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $args['useJoins'] Whether to include joining related objects (optional) (default=true).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function getEntities(array $args = array())
    {
    	$request = $this->get('request');
        $select = $request->request->filter('select', '', FILTER_SANITIZE_STRING);
        if ($select == 'mine') {

            $args['where'] = Eternizer_Util_Model::getUserId();
        }

        $type = $request->request->filter('type', '', FILTER_SANITIZE_STRING);

        if ($type == 'user' || $type = '') {
            if ($args['where'] != '') {
                $args['where'] .= ' AND ';
            }

            if ($args['where'] != '') {
                $args['where'] .= MUEternizerModule_Util_Model::entryAllowed();
            }
            else
            {
                $args['where'] = MUEternizerModule_Util_Model::entryAllowed();
            }
        }

        return parent::getEntities($args);
    }

    /**
     * Select a list of entities by different criteria.
     *
     * @param string  $args['ot']             The object type to retrieve (optional)
     * @param string  $args['where']          The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $args['orderBy']        The order-by clause to use when retrieving the collection (optional) (default='').
     * @param integer $args['currentPage']    Where to start selection
     * @param integer $args['resultsPerPage'] Amount of items to select
     * @param boolean $args['useJoins']       Whether to include joining related objects (optional) (default=true).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function getEntitiesPaginated(array $args = array())
    {
    	$request = $this->get('request');
        $select = $request->request->filter('select', '', FILTER_SANITIZE_STRING);
        if ($select == 'mine') {

            $args['where'] = ModelUtil::getUserId();
        }

        $type = $request->request->filter('type', '', FILTER_SANITIZE_STRING);
        
        
        $serviceManager = ServiceUtil::getManager();
        $modelHelper = $serviceManager->get('mueternizermodule.model_helper');

        if ($type == 'user' || $type == '') {
            if ($args['where'] != '') {
                $args['where'] .= ' AND ';
            }

            if ($args['where'] != '') {
                $args['where'] .= $modelHelper->entryAllowed();
            }
            else
            {
                $args['where'] = $modelHelper->entryAllowed();
            }
        }
        return parent::getEntitiesPaginated($args);
    }
}
