<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace MU\EternizerModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractEternizerEvents
{
    /**
     * The mueternizermodule.entry_post_load event is thrown when entries
     * are loaded from the database.
     *
     * The event listener receives an
     * MU\EternizerModule\Event\FilterEntryEvent instance.
     *
     * @see MU\EternizerModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const ENTRY_POST_LOAD = 'mueternizermodule.entry_post_load';
    
    /**
     * The mueternizermodule.entry_pre_persist event is thrown before a new entry
     * is created in the system.
     *
     * The event listener receives an
     * MU\EternizerModule\Event\FilterEntryEvent instance.
     *
     * @see MU\EternizerModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const ENTRY_PRE_PERSIST = 'mueternizermodule.entry_pre_persist';
    
    /**
     * The mueternizermodule.entry_post_persist event is thrown after a new entry
     * has been created in the system.
     *
     * The event listener receives an
     * MU\EternizerModule\Event\FilterEntryEvent instance.
     *
     * @see MU\EternizerModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const ENTRY_POST_PERSIST = 'mueternizermodule.entry_post_persist';
    
    /**
     * The mueternizermodule.entry_pre_remove event is thrown before an existing entry
     * is removed from the system.
     *
     * The event listener receives an
     * MU\EternizerModule\Event\FilterEntryEvent instance.
     *
     * @see MU\EternizerModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const ENTRY_PRE_REMOVE = 'mueternizermodule.entry_pre_remove';
    
    /**
     * The mueternizermodule.entry_post_remove event is thrown after an existing entry
     * has been removed from the system.
     *
     * The event listener receives an
     * MU\EternizerModule\Event\FilterEntryEvent instance.
     *
     * @see MU\EternizerModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const ENTRY_POST_REMOVE = 'mueternizermodule.entry_post_remove';
    
    /**
     * The mueternizermodule.entry_pre_update event is thrown before an existing entry
     * is updated in the system.
     *
     * The event listener receives an
     * MU\EternizerModule\Event\FilterEntryEvent instance.
     *
     * @see MU\EternizerModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const ENTRY_PRE_UPDATE = 'mueternizermodule.entry_pre_update';
    
    /**
     * The mueternizermodule.entry_post_update event is thrown after an existing new entry
     * has been updated in the system.
     *
     * The event listener receives an
     * MU\EternizerModule\Event\FilterEntryEvent instance.
     *
     * @see MU\EternizerModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const ENTRY_POST_UPDATE = 'mueternizermodule.entry_post_update';
    
}
