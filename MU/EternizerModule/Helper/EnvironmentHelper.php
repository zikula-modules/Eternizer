<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\EternizerModule\Helper;

use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\HttpKernel\KernelInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Environment helper implementation class.
 */
class EnvironmentHelper
{
    /**
     * @var KernelInterface
     */
    private $kernel;
    /**
     * @var TranslatorInterface
     */
    private $translator;
    /**
     * @var VariableApiInterface
     */
    private $variableApi;
    /**
     * @var SessionInterface
     */
    private $session;

    public function __construct(
        KernelInterface $kernel,
        TranslatorInterface $translator,
        VariableApiInterface $variableApi,
        SessionInterface $session
    ) {
        $this->kernel = $kernel;
        $this->translator = $translator;
        $this->variableApi = $variableApi;
        $this->session = $session;
    }

    /**
     * Checks some environment aspects and sets error messages.
     */
    public function check()
    {
        $flashBag = $this->session->getFlashBag();
        if (null === $this->kernel->getModule('MUEternizerModule')) {
            $flashBag->add('error', $this->translator->__('Mailer module is not available - unable to send emails!'));
        }
        if (false === $this->variableApi->get('MUEternizerModule', 'simplecaptcha', true)) {
            return;
        }
        if (!function_exists('imagettfbbox')
            || (!(imagetypes() && IMG_PNG) && !(imagetypes() && IMG_JPG) && !(imagetypes() && IMG_GIF))
        ) {
            $flashBag->add('status', $this->translator->__('There are no image function available - Captchas have been disabled.'));
            $this->variableApi->set('MUEternizerModule', 'simplecaptcha', false);
        }
        $cacheDirectory = $this->getCacheDirectory();
        if (!file_exists($cacheDirectory) || !is_writable($cacheDirectory)) {
            $flashBag->add('status', $this->translator->__('Eternizer cache directory does not exist or is not writable - Captchas have been disabled.'));
            $this->variableApi->set('MUEternizerModule', 'simplecaptcha', false);
        } elseif (!file_exists($cacheDirectory . '/.htaccess')) {
            $flashBag->add('status', $this->translator->__('Eternizer cache directory does not contain the required .htaccess file - Captchas have been disabled.'));
            $this->variableApi->set('MUEternizerModule', 'simplecaptcha', false);
        }
    }

    /**
     * Returns path to cache directory.
     *
     * @return string Path to temporary cache directory
     */
    public function getCacheDirectory()
    {
        return 'app/cache/eternizer';
    }
}
