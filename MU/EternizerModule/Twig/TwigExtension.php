<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\EternizerModule\Twig;

use MU\EternizerModule\Twig\Base\AbstractTwigExtension;
use Symfony\Component\HttpKernel\Controller\ControllerReference;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use MU\EternizerModule\Helper\ListEntriesHelper;
use MU\EternizerModule\Helper\EntityDisplayHelper;
use MU\EternizerModule\Helper\WorkflowHelper;
use MU\EternizerModule\Helper\ControllerHelper;

use ServiceUtil;

/**
 * Twig extension implementation class.
 */
class TwigExtension extends AbstractTwigExtension
{
	/**
	 * @var ControllerHelper
	 */
    
    protected $controllerHelper; 
    
    /**
     * TwigExtension constructor.
     *
     * @param TranslatorInterface $translator     Translator service instance
     * @param VariableApiInterface $variableApi    VariableApi service instance
     * @param EntityDisplayHelper $entityDisplayHelper EntityDisplayHelper service instance
     * @param WorkflowHelper      $workflowHelper WorkflowHelper service instance
     * @param ListEntriesHelper   $listHelper     ListEntriesHelper service instance
     * @param ControllerHelper    $controllerHelper ControllerHelper service instance
     */
    public function __construct(
    		TranslatorInterface $translator,
    		VariableApiInterface $variableApi,
    		EntityDisplayHelper $entityDisplayHelper,
    		WorkflowHelper $workflowHelper,
    		ListEntriesHelper $listHelper,
    		ControllerHelper $controllerHelper)
    {
    	$this->setTranslator($translator);
    	$this->variableApi = $variableApi;
    	$this->entityDisplayHelper = $entityDisplayHelper;
    	$this->workflowHelper = $workflowHelper;
    	$this->listHelper = $listHelper;
    	$this->controllerHelper = $controllerHelper;
    }
     
     /** Returns a list of custom Twig functions.
     *
     * @return array
     */
    public function getFunctions()
    {
    	$functions = parent::getFunctions();
    	$functions[] = new \Twig_SimpleFunction('mueternizermodule_showEditForm', [$this, 'showEditForm'], ['is_safe' => ['html']]);
    	$functions[] = new \Twig_SimpleFunction('mueternizermodule_editEntry', [$this, 'editEntry']);
    	$functions[] = new \Twig_SimpleFunction('mueternizermodule_simpleCaptcha', [$this, 'simpleCaptcha'], ['is_safe' => ['html']]);
    	
    	return $functions;
    }
    
    public function showEditForm()
    {
    	$request = \ServiceUtil::get('request_stack')->getMasterRequest();
    	$request->attributes->set('_zkModule', 'MUEternizerModule');
    
    	$fragmentHandler = \ServiceUtil::get('fragment.handler');
    
    	$ref = new ControllerReference('MUEternizerModule:Entry:edit');
    
    	return $fragmentHandler->render($ref, 'inline', []);
    }
    
    /**
     * The mueternizermodule_editEntry function checks if an item is in edit period.
     *
     * @return string The output of the plugin
     */
    public function editEntry($entryid, $createdUserId, $createdDate,  $kind = 1)
    {
    	$out = $this->controllerHelper->EditEntry($entryid, $createdUserId, $createdDate,  $kind = 1);

        return $out;
    }
    
    /**
     * The mueternizermodule_simpleCaptcha function adds a simplecaptcha image to a form.
     *
     * Example:
     *     {{ mueternizermodule_simpleCaptcha(font='quickhand', size=14, bgColour='ffffff', fgColour='000000') }}
     *
     * @param string $font     Name of font to use (arial, freesans, quickhand, vera)
     * @param int    $size     Font size
     * @param string $bgColour Background colour (hex code without the # char)
     * @param string $fgColour Foreground colour (hex code without the # char)
     *
     * @return string The image markup
     */
    public function simpleCaptcha($font = 'quickhand', $size = 14, $bgColour = 'ffffff', $fgColour = '000000')
    {
    	return $this->captchaHelper->createCaptcha($font, $size, $bgColour, $fgColour);
    }
    
    protected function setControllerHelper (ControllerHelper $controllerHelper) {
    	$this->controllerHelper = $controllerHelper;
    }
}
