<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\EternizerModule\Controller;

use MU\EternizerModule\Controller\Base\AbstractEntryController;

use RuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Zikula\ThemeModule\Engine\Annotation\Theme;
use Zikula\Core\RouteUrl;
use MU\EternizerModule\Entity\EntryEntity;
use Zikula\Component\SortableColumns\Column;
use Zikula\Component\SortableColumns\SortableColumns;
use System;
use ModUtil;

/**
 * Entry controller class providing navigation and interaction functionality.
 */
class EntryController extends AbstractEntryController
{
    /**
     * This is the default action handling the main admin area called without defining arguments.
     *
     * @Route("/admin/entries",
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request  $request      Current request instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminIndexAction(Request $request)
    {
        return parent::adminIndexAction($request);
    }
    
    /**
     * This is the default action handling the main area called without defining arguments.
     *
     * @Route("/entries",
     *        methods = {"GET"}
     * )
     *
     * @param Request  $request      Current request instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function indexAction(Request $request)
    {
        return parent::indexAction($request);
    }
    /**
     * This action provides an item list overview in the admin area.
     *
     * @Route("/admin/entries/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html|csv|rss|atom|xml|json|kml"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request  $request      Current request instance
     * @param string  $sort         Sorting field
     * @param string  $sortdir      Sorting direction
     * @param int     $pos          Current pager position
     * @param int     $num          Amount of entries to display
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminViewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::adminViewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * This action provides an item list overview.
     *
     * @Route("/entries/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html|csv|rss|atom|xml|json|kml"},
     *        defaults = {"sort" = "", "sortdir" = "desc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     *
     * @param Request  $request      Current request instance
     * @param string  $sort         Sorting field
     * @param string  $sortdir      Sorting direction
     * @param int     $pos          Current pager position
     * @param int     $num          Amount of entries to display
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function viewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::viewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * This method includes the common implementation code for adminView() and view().
     */
    protected function viewInternal(Request $request, $sort, $sortdir, $pos, $num, $isAdmin = false)
    {
    	// parameter specifying which type of objects we are treating
    	$objectType = 'entry';
    	$permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_READ;
    	if (!$this->hasPermission('MUEternizerModule:' . ucfirst($objectType) . ':', '::', $permLevel)) {
    		throw new AccessDeniedException();
    	}
    	$templateParameters = [
    			'routeArea' => $isAdmin ? 'admin' : ''
    	];
    	$controllerHelper = $this->get('mu_eternizer_module.controller_helper');
    	$viewHelper = $this->get('mu_eternizer_module.view_helper');
    	
    	$request->query->set('pos', $pos);
    	
    	$sortableColumns = new SortableColumns($this->get('router'), 'mueternizermodule_entry_' . ($isAdmin ? 'admin' : '') . 'view', 'sort', 'sortdir');
    	
    	$sortableColumns->addColumns([
    			new Column('workflowState'),
    			new Column('ip'),
    			new Column('name'),
    			new Column('email'),
    			new Column('homepage'),
    			new Column('location'),
    			new Column('text'),
    			new Column('notes'),
    			new Column('createdBy'),
    			new Column('createdDate'),
    			new Column('updatedBy'),
    			new Column('updatedDate'),
    	]);
    	
    	// parameter for used sort order
    	    $modSortDir = $this->getVar('order');
    	    if ($modSortDir != '') {
    		    if ($modSortDir == 'descending') {
    			    $sortdir = 'DESC';
    		    } else {
    			    $sortdir = 'ASC';
    		    }
    	    } else {
    	    	if ($sortdir == '') {
    	    	    $sortdir = 'DESC';
    	    	}
    	    }
    	    
    	$sortableColumns->setOrderBy($sortableColumns->getColumn($sort), strtoupper($sortdir));
    	
    	$templateParameters = $controllerHelper->processViewActionParameters($objectType, $sortableColumns, $templateParameters, true);
    	
    	foreach ($templateParameters['items'] as $k => $entity) {
    		$entity->initWorkflow();
    	}
    	
    	// fetch and return the appropriate template
    	return $viewHelper->processTemplate($objectType, 'view', $templateParameters);
    	
    	
    	
    	// parameter specifying which type of objects we are treating
    	/*$objectType = 'entry';
    	$utilArgs = ['controller' => 'entry', 'action' => 'view'];
    	$permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_READ;
    	if (!$this->hasPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel)) {
    		throw new AccessDeniedException();
    	}
    	$repository = $this->get('mu_eternizer_module.entity_factory')->getRepository('entry');
    	$repository->setRequest($request);
    	$viewHelper = $this->get('mu_eternizer_module.view_helper');
    	$templateParameters = [
    			'routeArea' => $isAdmin ? 'admin' : ''
    	];
    	$selectionHelper = $this->get('mu_eternizer_module.selection_helper');
    
    	// convenience vars to make code clearer
    	$currentUrlArgs = [];
    	$where = '';
    
    	$showOwnEntries = $request->query->getInt('own', $this->getVar('showOnlyOwnEntries', 0));
    	$showAllEntries = $request->query->getInt('all', 0);
    
    	if (!$showAllEntries) {
    		$csv = $request->getRequestFormat() == 'csv' ? 1 : 0;
    		if ($csv == 1) {
    			$showAllEntries = 1;
    		}
    	}
    
    	$templateParameters['own'] = $showAllEntries;
    	$templateParameters['all'] = $showOwnEntries;
    	if ($showAllEntries == 1) {
    		$currentUrlArgs['all'] = 1;
    	}
    	if ($showOwnEntries == 1) {
    		$currentUrlArgs['own'] = 1;
    	}
    
    	$additionalParameters = $repository->getAdditionalTemplateParameters('controllerAction', $utilArgs);
    
    	$resultsPerPage = 0;
    	if ($showAllEntries != 1) {
    		// the number of items displayed on a page for pagination
    		$resultsPerPage = $num;
    		if (in_array($resultsPerPage, [0, 10])) {
    			$resultsPerPage = $this->getVar($objectType . 'EntriesPerPage', 10);
    		}
    	}
    
    	// parameter for used sorting field
    	if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
    		$sort = $repository->getDefaultSortingField();
    		System::queryStringSetVar('sort', $sort);
    		$request->query->set('sort', $sort);
    		// set default sorting in route parameters (e.g. for the pager)
    		$routeParams = $request->attributes->get('_route_params');
    		$routeParams['sort'] = $sort;
    		$request->attributes->set('_route_params', $routeParams);
    	}
    
    	// parameter for used sort order
    	    $modSortDir = \ModUtil::getVar($this->name, 'order');
    	    if ($modSortDir != '') {
    		    if ($modSortDir == 'descending') {
    			    $sortdir = 'desc';
    		    } else {
    			    $sortdir = 'asc';
    		    }
    	    } else {
    	    	if ($sortdir == '') {
    	    	    $sortdir = 'desc';
    	    	}
    	    }
    
    	$sortableColumns = new SortableColumns($this->get('router'), 'mueternizermodule_entry_' . ($isAdmin ? 'admin' : '') . 'view', 'sort', 'sortdir');
    	$sortableColumns->addColumns([
    			new Column('workflowState'),
    			new Column('ip'),
    			new Column('name'),
    			new Column('email'),
    			new Column('homepage'),
    			new Column('location'),
    			new Column('text'),
    			new Column('notes'),
    			new Column('createdBy'),
    			new Column('createdDate'),
    			new Column('updatedBy'),
    			new Column('updatedDate'),
    	]);
    
    	$additionalUrlParameters = [
    			'all' => $showAllEntries,
    			'own' => $showOwnEntries,
    			'num' => $resultsPerPage
    	];
    	foreach ($additionalParameters as $parameterName => $parameterValue) {
    		if (false !== stripos($parameterName, 'thumbRuntimeOptions')) {
    			continue;
    		}
    		$additionalUrlParameters[$parameterName] = $parameterValue;
    	}
    
    	$templateParameters['sort'] = $sort;
    	$templateParameters['sortdir'] = $sortdir;
    	$templateParameters['num'] = $resultsPerPage;
    
    	$tpl = '';
    	if ($request->isMethod('POST')) {
    		$tpl = $request->request->getAlnum('tpl', '');
    	} elseif ($request->isMethod('GET')) {
    		$tpl = $request->query->getAlnum('tpl', '');
    	}
    	$templateParameters['tpl'] = $tpl;
    
    	$quickNavForm = $this->createForm('MU\EternizerModule\Form\Type\QuickNavigation\\' . ucfirst($objectType) . 'QuickNavType', $templateParameters);
    	if ($quickNavForm->handleRequest($request) && $quickNavForm->isSubmitted()) {
    		$quickNavData = $quickNavForm->getData();
    		foreach ($quickNavData as $fieldName => $fieldValue) {
    			if ($fieldName == 'routeArea') {
    				continue;
    			}
    			if ($fieldName == 'all') {
    				$showAllEntries = $additionalUrlParameters['all'] = $templateParameters['all'] = $fieldValue;
    			} elseif ($fieldName == 'own') {
    				$showOwnEntries = $additionalUrlParameters['own'] = $templateParameters['own'] = $fieldValue;
    			} elseif ($fieldName == 'num') {
    				$resultsPerPage = $additionalUrlParameters['num'] = $fieldValue;
    			} else {
    				// set filter as query argument, fetched inside repository
    				$request->query->set($fieldName, $fieldValue);
    			}
    		}
    	}
    	$sortableColumns->setOrderBy($sortableColumns->getColumn($sort), strtoupper($sortdir));
    	$sortableColumns->setAdditionalUrlParameters($additionalUrlParameters);
    
    	if ($showAllEntries == 1) {
    		// retrieve item list without pagination
    		$entities = $selectionHelper->getEntities($objectType, [], $where, $sort . ' ' . $sortdir);
    	} else {
    		// the current offset which is used to calculate the pagination
    		$currentPage = $pos;
    
    		// retrieve item list with pagination
    		list($entities, $objectCount) = $selectionHelper->getEntitiesPaginated($objectType, $where, $sort . ' ' . $sortdir, $currentPage, $resultsPerPage);
    
    		$templateParameters['currentPage'] = $currentPage;
    		$templateParameters['pager'] = ['numitems' => $objectCount, 'itemsperpage' => $resultsPerPage];
    	}
    
    	foreach ($entities as $k => $entity) {
    		$entity->initWorkflow();
    	}
    
    	// build RouteUrl instance for display hooks
    	$currentUrlArgs['_locale'] = $request->getLocale();
    	$currentUrlObject = new RouteUrl('mueternizermodule_entry_' . /*($isAdmin ? 'admin' : '') . *//*'view', $currentUrlArgs);
    
    	$templateParameters['items'] = $entities;
    	$templateParameters['sort'] = $sort;
    	$templateParameters['sortdir'] = $sortdir;
    	$templateParameters['num'] = $resultsPerPage;
    	$templateParameters['currentUrlObject'] = $currentUrlObject;
    	$templateParameters = array_merge($templateParameters, $additionalParameters);
    
    	$templateParameters['sort'] = $sortableColumns->generateSortableColumns();
    	$templateParameters['quickNavForm'] = $quickNavForm->createView();
    
    	$templateParameters['showAllEntries'] = $templateParameters['all'];
    	$templateParameters['showOwnEntries'] = $templateParameters['own'];
    
    	$modelHelper = $this->get('mu_eternizer_module.model_helper');
    	$templateParameters['canBeCreated'] = $modelHelper->canBeCreated($objectType);
    
    	// fetch and return the appropriate template
    	return $viewHelper->processTemplate($this->get('twig'), $objectType, 'view', $request, $templateParameters);*/
    }
    
    
    /**
     * This action provides a item detail view in the admin area.
     *
     * @Route("/admin/entry/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html|xml|json|kml|ics"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if item to be displayed isn't found
     */
    public function adminDisplayAction(Request $request, EntryEntity $entry)
    {
        return parent::adminDisplayAction($request, $entry);
    }
    
    /**
     * This action provides a item detail view.
     *
     * @Route("/entry/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html|xml|json|kml|ics"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if item to be displayed isn't found
     */
    public function displayAction(Request $request, EntryEntity $entry)
    {
        return parent::displayAction($request, $entry);
    }
    /**
     * This action provides a handling of edit requests in the admin area.
     *
     * @Route("/admin/entry/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     *
     * @param Request  $request      Current request instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by form handler if item to be edited isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function adminEditAction(Request $request)
    {
        return parent::adminEditAction($request);
    }
    
    /**
     * This action provides a handling of edit requests.
     *
     * @Route("/entry/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     *
     * @param Request  $request      Current request instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by form handler if item to be edited isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function editAction(Request $request)
    {
        return parent::editAction($request);
    }
    /**
     * This action provides a handling of simple delete requests in the admin area.
     *
     * @Route("/admin/entry/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if item to be deleted isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function adminDeleteAction(Request $request, EntryEntity $entry)
    {
        return parent::adminDeleteAction($request, $entry);
    }
    
    /**
     * This action provides a handling of simple delete requests.
     *
     * @Route("/entry/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     *
     * @param Request  $request      Current request instance
     * @param EntryEntity $entry      Treated entry instance
     *
     * @return mixed Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if item to be deleted isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function deleteAction(Request $request, EntryEntity $entry)
    {
        return parent::deleteAction($request, $entry);
    }

    /**
     * Process status changes for multiple items.
     *
     * This function processes the items selected in the admin view page.
     * Multiple items may have their state changed or be deleted.
     *
     * @Route("/entries/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return bool true on sucess, false on failure
     *
     * @throws RuntimeException Thrown if executing the workflow action fails
     */
    public function adminHandleSelectedEntriesAction(Request $request)
    {
        return parent::adminHandleSelectedEntriesAction($request);
    }
    /**
     * Process status changes for multiple items.
     *
     * This function processes the items selected in the admin view page.
     * Multiple items may have their state changed or be deleted.
     *
     * @Route("/entries/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return bool true on sucess, false on failure
     *
     * @throws RuntimeException Thrown if executing the workflow action fails
     */
    public function handleSelectedEntriesAction(Request $request)
    {
        return parent::handleSelectedEntriesAction($request);
    }

    // feel free to add your own controller methods here
}
