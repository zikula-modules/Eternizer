<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\EternizerModule\Form\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Api\VariableApi;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;

/**
 * Configuration form type base class.
 */
abstract class AbstractAppSettingsType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var VariableApi
     */
    protected $variableApi;

    /**
     * @var array
     */
    protected $modVars;

    /**
     * AppSettingsType constructor.
     *
     * @param TranslatorInterface      $translator      Translator service instance
     * @param VariableApi              $variableApi     VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        VariableApi $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->setTranslator($translator);
        $this->variableApi = $variableApi;
        $this->modVars = $this->variableApi->getAll('MUEternizerModule');

        foreach (['moderationGroupForEntries'] as $groupFieldName) {
            $groupId = intval($this->modVars[$groupFieldName]);
            if ($groupId < 1) {
                $groupId = 2; // fallback to admin group
            }
            $this->modVars[$groupFieldName] = $groupRepository->find($groupId);
        }
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addVariablesFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $builder
            ->add('save', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for variables fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addVariablesFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('mail', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
                'label' => $this->__('Mail') . ':',
                'required' => false,
                'data' => isset($this->modVars['mail']) ? $this->modVars['mail'] : '',
                'empty_data' => '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the mail.')
                ],
            ])
            ->add('order', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Order') . ':',
                'required' => false,
                'data' => isset($this->modVars['order']) ? $this->modVars['order'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the order.')
                ],'choices' => [
                    $this->__('Descending') => 'descending'
                    ,$this->__('Ascending') => 'ascending'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('moderate', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Moderate') . ':',
                'required' => false,
                'data' => isset($this->modVars['moderate']) ? $this->modVars['moderate'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the moderate.')
                ],'choices' => [
                    $this->__('Nothing') => 'nothing'
                    ,$this->__('Guests') => 'guests'
                    ,$this->__('All') => 'all'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('formposition', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Formposition') . ':',
                'required' => false,
                'data' => isset($this->modVars['formposition']) ? $this->modVars['formposition'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the formposition.')
                ],'choices' => [
                    $this->__('Above') => 'above'
                    ,$this->__('Below') => 'below'
                    ,$this->__('Menue') => 'menue'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('ipsave', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Ipsave') . ':',
                'required' => false,
                'data' => (bool)(isset($this->modVars['ipsave']) ? $this->modVars['ipsave'] : false),
                'attr' => [
                    'title' => $this->__('The ipsave option.')
                ],
            ])
            ->add('editentries', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Editentries') . ':',
                'required' => false,
                'data' => (bool)(isset($this->modVars['editentries']) ? $this->modVars['editentries'] : false),
                'attr' => [
                    'title' => $this->__('The editentries option.')
                ],
            ])
            ->add('period', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Period') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Here we can decide how long a user may edit his entry; input of hours')
                ],
                'help' => $this->__('Here we can decide how long a user may edit his entry; input of hours'),
                'required' => false,
                'data' => isset($this->modVars['period']) ? $this->modVars['period'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the period.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('simplecaptcha', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Simplecaptcha') . ':',
                'required' => false,
                'data' => (bool)(isset($this->modVars['simplecaptcha']) ? $this->modVars['simplecaptcha'] : false),
                'attr' => [
                    'title' => $this->__('The simplecaptcha option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for moderation fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('moderationGroupForEntries', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
                'label' => $this->__('Moderation group for entries') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
                ],
                'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
                'data' => isset($this->modVars['moderationGroupForEntries']) ? $this->modVars['moderationGroupForEntries'] : '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Choose the moderation group for entries.')
                ],// Zikula core should provide a form type for this to hide entity details
                'class' => 'ZikulaGroupsModule:GroupEntity',
                'choice_label' => 'name',
                'choice_value' => 'gid'
            ])
        ;
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('entryEntriesPerPage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Entry entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of entries shown per page')
                ],
                'help' => $this->__('The amount of entries shown per page'),
                'required' => false,
                'data' => isset($this->modVars['entryEntriesPerPage']) ? $this->modVars['entryEntriesPerPage'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the entry entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnEntriesOnAccountPage', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Link own entries on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to entries of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to entries of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->modVars['linkOwnEntriesOnAccountPage']) ? $this->modVars['linkOwnEntriesOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own entries on account page option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('enabledFinderTypes', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Enabled finder types') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
                ],
                'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
                'required' => false,
                'data' => isset($this->modVars['enabledFinderTypes']) ? $this->modVars['enabledFinderTypes'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the enabled finder types.')
                ],'choices' => [
                    $this->__('Entry') => 'entry'
                ],
                'choices_as_values' => true,
                'multiple' => true
            ])
        ;
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'mueternizermodule_appsettings';
    }
}
