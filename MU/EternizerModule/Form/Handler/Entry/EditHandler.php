<?php
/**
 * Eternizer.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\EternizerModule\Form\Handler\Entry;

use MU\EternizerModule\Form\Handler\Entry\Base\AbstractEditHandler;
use MU\EternizerModule\Helper\CaptchaHelper;

/**
 * This handler class handles the page events of the Form called by the mUEternizerModule_entry_edit() function.
 * It aims on the entry object type.
 */
class EditHandler extends AbstractEditHandler
{
    /**
     * @var CaptchaHelper
     */
    protected $captchaHelper;

    /**
     * Initialise existing entity for editing.
     *
     * @return EntityAccess|null Desired entity instance or null
     *
     * @throws NotFoundHttpException Thrown if item to be edited isn't found
     */
    protected function initEntityForEditing()
    {
        $currentUser = $this->currentUserApi->get('uid');

        $entity = $this->entityFactory->getRepository('entry')->selectById($this->idValue);
        if (null === $entity) {
            throw new NotFoundHttpException($this->__('No such item.'));
        }

        $editEntryAllowed = $this->controllerHelper->editEntry($entity['id'], $entity->getCreatedBy()->getUid(), $entity->getCreatedDate(), 2);
        if (($editEntryAllowed == false || $currentUser < 2) && $this->templateParameters['routeArea'] != 'admin') {
            $url = $this->router->generate('mueternizermodule_entry_view');

            return new RedirectResponse($url);
        }
        
        // prepare captcha  
        $simpleCaptcha = $this->variableApi->get('MUEternizerModule', 'simplecaptcha');

        // reset captcha
        $session = $this->request->getSession();
        if ($simpleCaptcha && $session->has('eternizerCaptcha')) {      
            $session->del('eternizerCaptcha');
        }

        if ($currentUser != $entity->getCreatedBy()->getUid() && $this->templateParameters['routeArea'] != 'admin') {
            return false;
        }

        return $entity;
    } 

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user.
     *
     * @param array $args List of arguments
     *
     * @return mixed Redirect or false on errors
     */
    public function handleCommand(array $args = [])
    {
        $routeArea = array_key_exists('routeArea', $this->templateParameters) ? $this->templateParameters['routeArea'] : '';
        $isAdmin = $routeArea == 'admin';
        if ($this->variableApi->get('MUEternizerModule', 'simplecaptcha') == 1 and !$isAdmin) {
            $formData = $this->request->request->getDigits('mueternizermodule_entry', 0);
            $captcha = $formData['captcha'];

            $session = $this->request->getSession();
            $operands = unserialize($session->get('eternizerCaptcha'));

            $captchaValid = $this->captchaHelper->isCaptchaValid($operands, $captcha);
            if (false === $captchaValid) {
                $session->getFlashBag()->add('error', $this->__('The calculation to prevent spam was incorrect. Please try again.'));

                return false;
            }
        }

        return parent::handleCommand($args);
    }
    
    /**
     * Get success or error message for default operations.
     *
     * @param array   $args    Arguments from handleCommand method
     * @param Boolean $success Becomes true if this is a success, false for default error
     *
     * @return String desired status or error message
     */
    protected function getDefaultMessage(array $args = [], $success = false)
    {
        if (false === $success) {
            return parent::getDefaultMessage($args, $success);
        }

        $message = '';
        switch ($args['commandName']) {
            case 'submit':
                if ($this->templateParameters['mode'] == 'create') {
                    // get the actual user
                    $userId = $this->currentUserApi->get('uid');
                    $message = $this->__('Done! Entry created.');
                    // get moderate modvar
                    $moderation = $this->variableApi->get('MUEternizerModule', 'moderate');
                    if ($moderation == 'all') {					
                        if ($userId != 2) {
                            $message .= $this->__('We will review your submit as soon as possible.');
                        }
                    }
                    if ($moderation == 'guests') {
                        if ($userId <= 1) {
                            $message .= $this->__('We will review your submit as soon as possible');
                        }
                    }
                } else {
                    $message = $this->__('Done! Entry updated.');
                }
                break;
            case 'delete':
                $message = $this->__('Done! Entry deleted.');
                break;
            default:
                $message = $this->__('Done! Entry updated.');
                break;
        }

        return $message;
    }

    public function setCaptchaHelper(CaptchaHelper $captchaHelper)
    {
        $this->captchaHelper = $captchaHelper;
    }
}
